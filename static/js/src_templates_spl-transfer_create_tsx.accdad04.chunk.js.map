{"version":3,"file":"static/js/src_templates_spl-transfer_create_tsx.accdad04.chunk.js","mappings":"yQAeA,MA4CA,EA5CqB,IAKK,IALJ,GACpBA,EADoB,MAEpBC,EAFoB,aAGpBC,KACGC,GACoB,EACvB,MAAMC,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,KAAKV,MAC7D,WAAEW,IAAeC,EAAAA,EAAAA,aACjBC,GAAUC,EAAAA,EAAAA,GAAWH,IAE3BI,EAAAA,EAAAA,YAAU,KACFb,QAA0Bc,IAAVV,GACpBF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKE,EAAagB,gBAC/C,CAAChB,EAAcE,EAAUJ,EAAIM,IAEhC,MAAMa,EAAWb,KAAK,OAAKO,QAAL,IAAKA,OAAL,EAAKA,EAASO,OAAOC,YAE3C,OACE,UAAC,EAAAC,MAAD,CAAOC,UAAU,WAAWC,KAAM,EAAGC,MAAO,CAAEC,MAAO,QAArD,WACE,SAAC,EAAAC,WAAA,KAAD,CAAiBC,KAAK,YAAtB,SAAmC3B,KACnC,SAAC,EAAA4B,MAAD,CACEC,UAAU,cACVC,YAAY,gBACZzB,MAAOA,EACP0B,SAAWC,GAAM7B,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKiC,EAAEC,OAAO5B,SAC3D6B,OACEhB,GACE,SAAC,EAAAiB,OAAD,CACER,KAAK,SACLJ,KAAK,QACLC,MAAO,CAAEY,YAAa,EAAGC,YAAa,EAAGC,YAAa,IAHxD,qBAQA,SAAC,EAAAC,SAAD,OAGArC,Q,eC7CZ,MAiCA,EAjCkB,IAUX,IAVY,GACjBH,EADiB,MAEjBC,EAFiB,aAGjBC,EAHiB,SAIjBuC,GAAW,GAMP,EACJ,MAAMrC,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,KAAKV,KAOnE,OALAe,EAAAA,EAAAA,YAAU,KACFb,QAA0Bc,IAAVV,GACpBF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKE,EAAagB,gBAC/C,CAAChB,EAAcE,EAAUJ,EAAIM,KAG9B,UAAC,EAAAgB,MAAD,CAAOC,UAAU,WAAWC,KAAM,EAAGC,MAAO,CAAEC,MAAO,QAArD,UACGzB,IAAS,SAAC,EAAA0B,WAAA,KAAD,CAAiBC,KAAK,YAAtB,SAAmC3B,KAC7C,SAAC,KAAD,CACEK,MAAOA,EACP0B,SAAW1B,IACTF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKM,MAEnCmB,MAAO,CAAEY,YAAa,GACtBI,SAAUA,Q,eC5BlB,MA2BA,EA3BoB,IAK+B,IAL9B,GACnBzC,EADmB,MAEnBC,EAFmB,aAGnBC,KACGC,GAC6C,EAChD,MAAMC,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,KAAKV,KAOnE,OALAe,EAAAA,EAAAA,YAAU,KACFb,QAA0Bc,IAAVV,GACpBF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKE,EAAagB,gBAC/C,CAAChB,EAAcE,EAAUJ,EAAIM,KAG9B,UAAC,EAAAgB,MAAD,CAAOC,UAAU,WAAWC,KAAM,EAAGC,MAAO,CAAEC,MAAO,QAArD,WACE,SAAC,EAAAC,WAAA,KAAD,CAAiBC,KAAK,YAAtB,SAAmC3B,KACnC,SAAC,IAAD,CACE6B,UAAU,cACVC,YAAY,eACZ7B,aAAcI,EACdoC,QAAUC,GAAQvC,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAK2C,QAC/CxC,S,mEC5BL,IAAKyC,GAAZ,SAAYA,GAAAA,EAAAA,aAAAA,gBAAAA,EAAAA,WAAAA,aAAZ,CAAYA,IAAAA,EAAAA,KASL,MAAMC,EAAiB,CAC5B,CAACD,EAAUE,cAAe,CACxBC,KAAMC,SACGC,EAAAA,MAAAA,MAAAA,kBAA8B,CACnCC,KAAM,IAAIC,EAAAA,KAAAA,UAAezC,EAAKwC,MAC9BE,MAAO,IAAID,EAAAA,KAAAA,UAAezC,EAAK0C,UAIrC,CAACR,EAAUS,YAAa,CACtBN,KAAMC,UACJ,MAAM,KAAEM,GAASC,OAAOC,OAClBC,QAAiBH,EAAKI,YAAYhD,EAAKwC,MAC7C,OAAOS,EAAAA,QAAAA,WAAgBjD,EAAKkD,OAAQH,EAASI,c,8JCXnD,MAgDMC,EAAY,CAACnB,EAAaf,KAC9B,OAAQA,GACN,IAAK,KAEL,IAAK,MACH,OAAOmC,OAAOpB,GAChB,IAAK,MACH,OAAO,IAAIqB,EAAAA,GAAGrB,GAChB,QACE,MAAM,IAAIsB,MAAM,wBAA0BrC,KAyBnCsC,EAAelB,MAC1BmB,EACAC,KAEA,MAAMC,OApFYF,KAClB,MAAMG,EAAa,IAAIC,EAAAA,WAAWC,EAAAA,IAAK,CAAEC,WAAY,cAC/CC,EAAW,IAAIC,EAAAA,eAAeL,EAAY,IAAIM,EAAAA,EAAc,CAChEH,WAAY,cAEd,OAAO,IAAII,EAAAA,QACT,CACEC,aAAc,CACZ,CACEC,KAAMZ,EAAYa,OAClBC,SAAUd,EAAYc,SACtBC,KAAMf,EAAYe,OAGtBH,KAAM,iBACNI,QAAS,SAEXhB,EAAYiB,UACZV,IAkEoBW,CAAWlB,GAC3Bc,OA/DejC,OACrBmB,EACAC,KAEA,MAAMkB,EAAcnB,EAAYc,SAC1BA,EAAsC,GAC5C,IAAK,MAAMM,KAAcD,EAEvB,IAAIE,EAAAA,EAAAA,IAA0BD,GAAa,CACzC,MAAME,EAAaF,EAAWG,KAAKC,QAC7BC,EAAgB,GACtB,IAAK,MAAMC,KAAOJ,EAChBG,EAASC,GAAOzB,EAAaqB,EAAWI,IAC1C,MAAMC,QAAoBjD,EAAAA,EAAe0C,EAAWG,KAAKX,MAAMhC,KAAK,IAC/D6C,IAELX,EAASM,EAAWR,MAAQe,OAE5Bb,EAASM,EAAWR,MAAQ,IAAIgB,EAAAA,UAAU3B,EAAamB,EAAWR,OAGtE,OAAOE,GA0CgBe,CAAe7B,EAAaC,GAC7Cc,OA3BWlC,OACjBmB,EACAC,KAEA,MAAMc,EAAc,GACpB,IAAK,MAAMe,KAAO9B,EAAYe,KAAM,CAClC,IAAIvC,EAAWyB,EAAa6B,EAAIlB,MAChC,IAAImB,EAAAA,EAAAA,IAAsBD,GAAM,CAC9B,MAAMR,EAAaQ,EAAIP,KAAKC,QACtBC,EAAgB,GACtB,IAAK,MAAMC,KAAOJ,EAChBG,EAASC,GAAOzB,EAAaqB,EAAWI,IAC1ClD,QAAYE,EAAAA,EAAeoD,EAAIP,KAAKX,MAAMhC,KAAK,IAC1C6C,IAGPV,EAAKiB,KAAKrC,EAAUnB,EAAKsD,EAAIrE,OAE/B,OAAOsD,GASYkB,CAAWjC,EAAaC,GACrCiC,QAAWhC,EAAQiC,QAAQnC,EAAYa,QAC1CjC,UAAK,KAASmC,GACdD,SAASA,GACTsB,cAIH,OAHKpC,EAAYqC,SACfH,EAAG3F,KAAO2F,EAAG3F,KAAK+F,MA9FK,EA8FqBJ,EAAG3F,KAAKgG,SAE/CL,G,eC7FT,MACEM,UAAU,MAAEC,IACVjB,EAAAA,EAESkB,EAAgB,KAC3B,MAAMzG,GAAWC,EAAAA,EAAAA,eACXyG,GAAUC,EAAAA,EAAAA,eACV,WAAEpG,IAAeC,EAAAA,EAAAA,cACjB,WAAEoG,IAAeC,EAAAA,EAAAA,GAActG,GAqBrC,MAAO,CAAEuG,SAnBOC,EAAAA,EAAAA,cACdnE,MAAOmB,EAA0BC,KAC/B,MAAMiC,QAAWnC,EAAaC,EAAaC,GACrCgD,ODmF4B,EACtCjD,EACAkC,KAEA,MAAMpB,EAAgD,GACtD,IAAK,IAAIoC,EAAI,EAAGA,EAAIlD,EAAYc,SAASyB,OAAQW,IAAK,CACpD,MAAMC,EAASnD,EAAYc,SAASoC,GACpCpC,EAASqC,EAAOvC,MAAQ,CACtB5D,SAAUmG,EAAOnG,SACjBoG,SAAUD,EAAOC,SACjBC,WAAYF,EAAOG,MACnB3B,OAAQO,EAAGqB,KAAKL,GAAGvB,QAUvB,MAN+C,CAC7Cf,KAAMZ,EAAYY,KAClBrE,KAAM2F,EAAG3F,KACTuE,WACAG,UAAW,IAAIW,EAAAA,UAAU5B,EAAYiB,aCtGlBuC,CAAyBxD,EAAakC,GAKvD,aAJMjG,GAASwH,EAAAA,EAAAA,IAAgBzD,EAAYY,aACrC3E,GAASyH,EAAAA,EAAAA,IAAMT,UACfhH,GAAS0H,EAAAA,EAAAA,KAAW,UACpB1H,GAASa,EAAAA,EAAAA,IAAgBmD,IACxB0C,EAAQX,KACZ,QAAOS,SAAajG,KAAcqG,oBAGvC,CAACrG,EAAYqG,EAAY5G,EAAU0G,IAOnBiB,OAJJZ,EAAAA,EAAAA,cAAYnE,gBAClB5C,GAAS4H,EAAAA,EAAAA,SACd,CAAC5H,O,0ICxCC,IAAK6H,GAAZ,SAAYA,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,YAAAA,cAAAA,EAAAA,UAAAA,YAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAZ,CAAYA,IAAAA,EAAAA,KAYL,MAAMC,EAA8B,CACzCnD,KAAMoD,EAAAA,GAAAA,YACNnD,OAAQmD,EAAAA,GAAAA,YACR3B,QAAQ,EACRvB,SAAU,CACR,CACEF,KAAMkD,EAAeG,OACrBX,OAAO,EACPF,UAAU,EACVpG,UAAU,EACVuE,KAAM,CACJX,KAAMnC,EAAAA,EAAAA,aACN+C,QAAS,CAAEzC,KAAM+E,EAAe/E,KAAME,MAAO6E,EAAeG,UAGhE,CACErD,KAAMkD,EAAeI,YACrBZ,OAAO,EACPF,UAAU,EACVpG,UAAU,EACVuE,KAAM,CACJX,KAAMnC,EAAAA,EAAAA,aACN+C,QAAS,CACPzC,KAAM+E,EAAe/E,KACrBE,MAAO6E,EAAeI,eAI5B,CACEtD,KAAMkD,EAAeK,UACrBb,OAAO,EACPF,UAAU,EACVpG,UAAU,IAGd+D,KAAM,CACJ,CAAEH,KAAMkD,EAAeM,KAAM3G,KAAM,MACnC,CACEmD,KAAMkD,EAAerE,OACrBhC,KAAM,MACN8D,KAAM,CACJX,KAAMnC,EAAAA,EAAAA,WACN+C,QAAS,CACP/B,OAAQqE,EAAerE,OACvBV,KAAM+E,EAAe/E,SAK7BkC,UAAWnC,EAAAA,MAAAA,MAAAA,iBAAAA,Y,qCCpDb,MAiEA,EAjEe,IAAgD,IAA/C,WAAEtC,EAAa,IAA+B,EAC5D,MAAME,GAAUC,EAAAA,EAAAA,GAAWH,GACrByD,GAAe7D,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,QAC/D,QAAEwG,EAAF,MAAWa,IAAUlB,EAAAA,EAAAA,KAErB2B,GAAYrB,EAAAA,EAAAA,cAAYnE,UAC5B,IACE,IAAKnC,EAAS,MAAM,IAAIoD,MAAM,oBAC9B,MAAMwE,EAAc,CAClB,CAACR,EAAeM,MAAO,IACvB,CAACN,EAAeK,WAAYzH,EAAQO,OAAOC,WAC3C,CAAC4G,EAAeG,QAASvH,EAAQO,OAAOC,YAE1C,OAAO6F,EAAQgB,EAAgB,IAAKO,KAAgBrE,IACpD,MAAOsE,GACPnF,OAAOoF,OAAO,CAAE/G,KAAM,QAASgH,YAAaF,EAAGG,aAEhD,CAAC3B,EAASrG,EAASuD,IAEhB3B,GACH2B,EAAa6D,EAAerE,WAC5BkF,EAAAA,EAAAA,WAAU1E,EAAa6D,EAAeI,gBACtCjE,EAAa6D,EAAe/E,MAE/B,OAAKrC,GAEH,UAAC,EAAAkI,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAAC,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,KAAD,CACElJ,GAAIiI,EAAerE,OACnB3D,MAAM,WACNkC,QAAQ,SAAC,KAAD,CAAWnC,GAAIiI,EAAe/E,YAG1C,SAAC,EAAA+F,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,KAAD,CACElJ,GAAIiI,EAAeG,OACnBnI,MAAM,0BACN8B,YAAY,gCACZoH,UAAQ,EACRjJ,aAAcW,EAAQO,OAAOC,gBAGjC,SAAC,EAAA4H,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,KAAD,CACElJ,GAAIiI,EAAeI,YACnBpI,MAAM,4BACN8B,YAAY,uCAGhB,SAAC,EAAAkH,IAAD,CAAKC,KAAM,MACX,SAAC,EAAAD,IAAD,CAAKC,KAAM,GAAIzH,MAAO,CAAE2H,UAAW,SAAnC,UACE,UAAC,EAAA9H,MAAD,YACE,SAAC,EAAAc,OAAD,CAAQR,KAAK,OAAOyH,QAAStB,EAA7B,oBAGA,SAAC,EAAA3F,OAAD,CAAQR,KAAK,UAAUyH,QAASb,EAAW/F,SAAUA,EAArD,+BAhCa,SAAC,EAAA6G,MAAD,CAAOV,YAAY","sources":["templates/components/addressInput.tsx","templates/components/mintInput.tsx","templates/components/numberInput.tsx","templates/core/rule.ts","templates/core/templateParser.ts","templates/hooks/useConfirmIdl.ts","templates/spl-transfer/configs.ts","templates/spl-transfer/create.tsx"],"sourcesContent":["import { Fragment, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\nimport { InputProps, Space, Typography, Input, Button } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\nimport { useDaoData } from 'hooks/dao'\n\ntype PropsAddressInput = {\n  id: string\n  title: string\n} & InputProps\n\nconst AddressInput = ({\n  id,\n  title,\n  defaultValue,\n  ...rest\n}: PropsAddressInput) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const daoData = useDaoData(daoAddress)\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  const isMaster = value === daoData?.master.toBase58()\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <Input\n        className=\"border-less\"\n        placeholder=\"Input Address\"\n        value={value}\n        onChange={(e) => dispatch(setTemplateData({ [id]: e.target.value }))}\n        prefix={\n          isMaster ? (\n            <Button\n              type=\"dashed\"\n              size=\"small\"\n              style={{ marginLeft: -4, marginRight: 2, borderWidth: 0.5 }}\n            >\n              Master\n            </Button>\n          ) : (\n            <Fragment />\n          )\n        }\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default AddressInput\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Space, Typography } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\nimport { MintSelection } from 'shared/antd/mint'\n\nconst MintInput = ({\n  id,\n  title,\n  defaultValue,\n  disabled = false,\n}: {\n  id: string\n  title?: string\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      {title && <Typography.Text type=\"secondary\">{title}</Typography.Text>}\n      <MintSelection\n        value={value}\n        onChange={(value) => {\n          dispatch(setTemplateData({ [id]: value }))\n        }}\n        style={{ marginLeft: -7 }}\n        disabled={disabled}\n      />\n    </Space>\n  )\n}\nexport default MintInput\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { InputProps, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\n\nconst NumberInput = ({\n  id,\n  title,\n  defaultValue,\n  ...rest\n}: { id: string; title: string } & InputProps) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <NumericInput\n        className=\"border-less\"\n        placeholder=\"Input Amount\"\n        defaultValue={value}\n        onValue={(val) => dispatch(setTemplateData({ [id]: val }))}\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default NumberInput\n","import { utils, web3 } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport enum RulesName {\n  'tokenAccount' = 'token-account',\n  'decimalize' = 'decimalize',\n}\n\nexport type RulesData = {\n  [RulesName.tokenAccount]: { mint: string; owner: string }\n  [RulesName.decimalize]: { mint: string; amount: string }\n}\nexport const TEMPLATE_RULES = {\n  [RulesName.tokenAccount]: {\n    call: async (data: RulesData[RulesName.tokenAccount]) => {\n      return utils.token.associatedAddress({\n        mint: new web3.PublicKey(data.mint),\n        owner: new web3.PublicKey(data.owner),\n      })\n    },\n  },\n  [RulesName.decimalize]: {\n    call: async (data: RulesData[RulesName.decimalize]) => {\n      const { splt } = window.sentre\n      const mintData = await splt.getMintData(data.mint)\n      return util.decimalize(data.amount, mintData.decimals)\n    },\n  },\n}\n","import { AnchorProvider, Program, BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js'\n\nimport { rpc } from '@sentre/senhub'\nimport SafeWallet from 'helpers/safeWallet'\nimport {\n  isTemplateAccountWithRule,\n  isTemplateArgWithRule,\n  TemplateArg,\n  TemplateIdl,\n} from 'templates'\nimport { TEMPLATE_RULES } from './rule'\nimport { ProposalAccountType, ProposalReturnType } from 'view/templates/types'\n\nconst ANCHOR_PREFIX_SIZE = 8\n\nconst getProgram = (templateIdl: TemplateIdl) => {\n  const connection = new Connection(rpc, { commitment: 'confirmed' })\n  const provider = new AnchorProvider(connection, new SafeWallet(), {\n    commitment: 'confirmed',\n  })\n  return new Program(\n    {\n      instructions: [\n        {\n          name: templateIdl.ixName,\n          accounts: templateIdl.accounts,\n          args: templateIdl.args,\n        },\n      ],\n      name: 'program-parser',\n      version: '0.0.0',\n    },\n    templateIdl.programId,\n    provider,\n  )\n}\n\nconst parserAccounts = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n): Promise<Record<string, PublicKey>> => {\n  const idlAccounts = templateIdl.accounts\n  const accounts: Record<string, PublicKey> = {}\n  for (const idlAccount of idlAccounts) {\n    // Build pubkey with template rule\n    if (isTemplateAccountWithRule(idlAccount)) {\n      const ruleConfig = idlAccount.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      const pubkey: any = await TEMPLATE_RULES[idlAccount.rule.name].call({\n        ...ruleData,\n      })\n      accounts[idlAccount.name] = pubkey\n    } else {\n      accounts[idlAccount.name] = new PublicKey(templateData[idlAccount.name])\n    }\n  }\n  return accounts\n}\n\nconst parserArg = (val: string, type: TemplateArg['type']) => {\n  switch (type) {\n    case 'u8':\n      return Number(val)\n    case 'u32':\n      return Number(val)\n    case 'u64':\n      return new BN(val)\n    default:\n      throw new Error('Invalid type of arg: ' + type)\n  }\n}\n\nconst parserArgs = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const args: any[] = []\n  for (const arg of templateIdl.args) {\n    let val: any = templateData[arg.name]\n    if (isTemplateArgWithRule(arg)) {\n      const ruleConfig = arg.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      val = await TEMPLATE_RULES[arg.rule.name].call({\n        ...ruleData,\n      })\n    }\n    args.push(parserArg(val, arg.type))\n  }\n  return args\n}\n\nexport const parserIxData = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const program = await getProgram(templateIdl)\n  const accounts = await parserAccounts(templateIdl, templateData)\n  const args = await parserArgs(templateIdl, templateData)\n  const ix = await program.methods[templateIdl.ixName]\n    .call(this, ...args)\n    .accounts(accounts)\n    .instruction()\n  if (!templateIdl.anchor)\n    ix.data = ix.data.slice(ANCHOR_PREFIX_SIZE, ix.data.length)\n\n  return ix\n}\n\nexport const parserProposalReturnType = (\n  templateIdl: TemplateIdl,\n  ix: TransactionInstruction,\n): ProposalReturnType => {\n  const accounts: Record<string, ProposalAccountType> = {}\n  for (let i = 0; i < templateIdl.accounts.length; i++) {\n    const idlAcc = templateIdl.accounts[i]\n    accounts[idlAcc.name] = {\n      isMaster: idlAcc.isMaster,\n      isSigner: idlAcc.isSigner,\n      isWritable: idlAcc.isMut,\n      pubkey: ix.keys[i].pubkey,\n    }\n  }\n\n  const proposalReturnType: ProposalReturnType = {\n    name: templateIdl.name,\n    data: ix.data,\n    accounts,\n    programId: new PublicKey(templateIdl.programId),\n  }\n  return proposalReturnType\n}\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport configs from 'configs'\nimport { AppDispatch } from 'model'\nimport {\n  clearTemplate,\n  setTemplateData,\n  setTemplateName,\n  setTx,\n  setVisible,\n} from 'model/template.controller'\nimport { TemplateIdl } from '../index'\nimport { parserIxData, parserProposalReturnType } from '../core/templateParser'\nimport useDaoNameUrl from 'hooks/dao/useDaoNameUrl'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const { daoNameUrl } = useDaoNameUrl(daoAddress)\n\n  const confirm = useCallback(\n    async (templateIdl: TemplateIdl, templateData: Record<string, string>) => {\n      const ix = await parserIxData(templateIdl, templateData)\n      const tx = await parserProposalReturnType(templateIdl, ix)\n      await dispatch(setTemplateName(templateIdl.name))\n      await dispatch(setTx(tx))\n      await dispatch(setVisible(false))\n      await dispatch(setTemplateData(templateData))\n      return history.push(\n        `/app/${appId}/dao/${daoAddress}/${daoNameUrl}/new-proposal`,\n      )\n    },\n    [daoAddress, daoNameUrl, dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { utils } from '@project-serum/anchor'\nimport { RulesName } from '../core/rule'\nimport { TemplateIdl, TemplateNames } from './../index'\n\nexport enum SplTransferIds {\n  // Accounts\n  source = 'source',\n  destination = 'destination',\n  authority = 'authority',\n  // Prams\n  code = 'code',\n  amount = 'amount',\n  // Context\n  mint = 'mint',\n}\n\nexport const SplTransferIdl: TemplateIdl = {\n  name: TemplateNames.SplTransfer,\n  ixName: TemplateNames.SplTransfer,\n  anchor: false,\n  accounts: [\n    {\n      name: SplTransferIds.source,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n      rule: {\n        name: RulesName.tokenAccount,\n        configs: { mint: SplTransferIds.mint, owner: SplTransferIds.source },\n      },\n    },\n    {\n      name: SplTransferIds.destination,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n      rule: {\n        name: RulesName.tokenAccount,\n        configs: {\n          mint: SplTransferIds.mint,\n          owner: SplTransferIds.destination,\n        },\n      },\n    },\n    {\n      name: SplTransferIds.authority,\n      isMut: true,\n      isSigner: true,\n      isMaster: true,\n    },\n  ],\n  args: [\n    { name: SplTransferIds.code, type: 'u8' },\n    {\n      name: SplTransferIds.amount,\n      type: 'u64',\n      rule: {\n        name: RulesName.decimalize,\n        configs: {\n          amount: SplTransferIds.amount,\n          mint: SplTransferIds.mint,\n        },\n      },\n    },\n  ],\n  programId: utils.token.TOKEN_PROGRAM_ID.toBase58(),\n}\n","import { useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { isAddress } from '@interdao/core'\n\nimport { Button, Col, Empty, Row, Space } from 'antd'\nimport { NumberInput, MintInput, AddressInput } from 'templates/components'\n\nimport { AppState } from 'model'\nimport { SplTransferIdl, SplTransferIds } from '../spl-transfer/configs'\nimport { PropsCreateComponent } from '../index'\nimport { useConfirmIdl } from '../hooks/useConfirmIdl'\nimport { useDaoData } from 'hooks/dao'\n\nconst Create = ({ daoAddress = '' }: PropsCreateComponent) => {\n  const daoData = useDaoData(daoAddress)\n  const templateData = useSelector((state: AppState) => state.template.data)\n  const { confirm, close } = useConfirmIdl()\n\n  const onConfirm = useCallback(async () => {\n    try {\n      if (!daoData) throw new Error('Invalid DAO data')\n      const defaultData = {\n        [SplTransferIds.code]: '3',\n        [SplTransferIds.authority]: daoData.master.toBase58(),\n        [SplTransferIds.source]: daoData.master.toBase58(),\n      }\n      return confirm(SplTransferIdl, { ...defaultData, ...templateData })\n    } catch (er: any) {\n      window.notify({ type: 'error', description: er.message })\n    }\n  }, [confirm, daoData, templateData])\n\n  const disabled =\n    !templateData[SplTransferIds.amount] ||\n    !isAddress(templateData[SplTransferIds.destination]) ||\n    !templateData[SplTransferIds.mint]\n\n  if (!daoData) return <Empty description=\"Invalid DAO data\" />\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <NumberInput\n          id={SplTransferIds.amount}\n          title=\"Transfer\"\n          prefix={<MintInput id={SplTransferIds.mint} />}\n        />\n      </Col>\n      <Col span={24}>\n        <AddressInput\n          id={SplTransferIds.source}\n          title=\"Sender's Wallet Address\"\n          placeholder=\"Input Sender's Wallet Address\"\n          readOnly\n          defaultValue={daoData.master.toBase58()}\n        />\n      </Col>\n      <Col span={24}>\n        <AddressInput\n          id={SplTransferIds.destination}\n          title=\"Receiver's Wallet Address\"\n          placeholder=\"Input Receiver's Wallet Address\"\n        />\n      </Col>\n      <Col span={24} />\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={onConfirm} disabled={disabled}>\n            Continue\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n"],"names":["id","title","defaultValue","rest","dispatch","useDispatch","value","useSelector","state","template","data","daoAddress","useParams","daoData","useDaoData","useEffect","undefined","setTemplateData","toString","isMaster","master","toBase58","Space","direction","size","style","width","Typography","type","Input","className","placeholder","onChange","e","target","prefix","Button","marginLeft","marginRight","borderWidth","Fragment","disabled","onValue","val","RulesName","TEMPLATE_RULES","tokenAccount","call","async","utils","mint","web3","owner","decimalize","splt","window","sentre","mintData","getMintData","util","amount","decimals","parserArg","Number","BN","Error","parserIxData","templateIdl","templateData","program","connection","Connection","rpc","commitment","provider","AnchorProvider","SafeWallet","Program","instructions","name","ixName","accounts","args","version","programId","getProgram","idlAccounts","idlAccount","isTemplateAccountWithRule","ruleConfig","rule","configs","ruleData","key","pubkey","PublicKey","parserAccounts","arg","isTemplateArgWithRule","push","parserArgs","ix","methods","instruction","anchor","slice","length","manifest","appId","useConfirmIdl","history","useHistory","daoNameUrl","useDaoNameUrl","confirm","useCallback","tx","i","idlAcc","isSigner","isWritable","isMut","keys","parserProposalReturnType","setTemplateName","setTx","setVisible","close","clearTemplate","SplTransferIds","SplTransferIdl","TemplateNames","source","destination","authority","code","onConfirm","defaultData","er","notify","description","message","isAddress","Row","gutter","Col","span","readOnly","textAlign","onClick","Empty"],"sourceRoot":""}