{"version":3,"file":"static/js/src_templates_spl-approve_create_tsx.a7831355.chunk.js","mappings":"wQAeA,MA4CA,EA5CqB,IAKK,IALJ,GACpBA,EADoB,MAEpBC,EAFoB,aAGpBC,KACGC,GACoB,EACvB,MAAMC,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,KAAKV,MAC7D,WAAEW,IAAeC,EAAAA,EAAAA,aACjBC,GAAUC,EAAAA,EAAAA,GAAWH,IAE3BI,EAAAA,EAAAA,YAAU,KACFb,QAA0Bc,IAAVV,GACpBF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKE,EAAagB,gBAC/C,CAAChB,EAAcE,EAAUJ,EAAIM,IAEhC,MAAMa,EAAWb,KAAK,OAAKO,QAAL,IAAKA,OAAL,EAAKA,EAASO,OAAOC,YAE3C,OACE,UAAC,EAAAC,MAAD,CAAOC,UAAU,WAAWC,KAAM,EAAGC,MAAO,CAAEC,MAAO,QAArD,WACE,SAAC,EAAAC,WAAA,KAAD,CAAiBC,KAAK,YAAtB,SAAmC3B,KACnC,SAAC,EAAA4B,MAAD,CACEC,UAAU,cACVC,YAAY,gBACZzB,MAAOA,EACP0B,SAAWC,GAAM7B,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKiC,EAAEC,OAAO5B,SAC3D6B,OACEhB,GACE,SAAC,EAAAiB,OAAD,CACER,KAAK,SACLJ,KAAK,QACLC,MAAO,CAAEY,YAAa,EAAGC,YAAa,EAAGC,YAAa,IAHxD,qBAQA,SAAC,EAAAC,SAAD,OAGArC,Q,eC9CZ,MAiBA,EAjBkB,IAAoD,IAAnD,GAAEH,EAAF,MAAMC,GAA4C,EACnE,MAAMG,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,KAAKV,KAEnE,OACE,UAAC,EAAAsB,MAAD,CAAOC,UAAU,WAAWC,KAAM,EAAGC,MAAO,CAAEC,MAAO,QAArD,UACGzB,IAAS,SAAC,EAAA0B,WAAA,KAAD,CAAiBC,KAAK,YAAtB,SAAmC3B,KAC7C,SAAC,KAAD,CACEK,MAAOA,EACP0B,SAAW1B,IACTF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKM,MAEnCmB,MAAO,CAAEY,YAAa,S,eCX9B,MA2BA,EA3BoB,IAK+B,IAL9B,GACnBrC,EADmB,MAEnBC,EAFmB,aAGnBC,KACGC,GAC6C,EAChD,MAAMC,GAAWC,EAAAA,EAAAA,eACXC,GAAQC,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,KAAKV,KAOnE,OALAe,EAAAA,EAAAA,YAAU,KACFb,QAA0Bc,IAAVV,GACpBF,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAKE,EAAagB,gBAC/C,CAAChB,EAAcE,EAAUJ,EAAIM,KAG9B,UAAC,EAAAgB,MAAD,CAAOC,UAAU,WAAWC,KAAM,EAAGC,MAAO,CAAEC,MAAO,QAArD,WACE,SAAC,EAAAC,WAAA,KAAD,CAAiBC,KAAK,YAAtB,SAAmC3B,KACnC,SAAC,IAAD,CACE6B,UAAU,cACVC,YAAY,eACZ7B,aAAcI,EACdmC,QAAUC,GAAQtC,GAASa,EAAAA,EAAAA,IAAgB,CAAE,CAACjB,GAAK0C,QAC/CvC,S,mEC5BL,IAAKwC,GAAZ,SAAYA,GAAAA,EAAAA,aAAAA,gBAAAA,EAAAA,WAAAA,aAAZ,CAAYA,IAAAA,EAAAA,KASL,MAAMC,EAAiB,CAC5B,CAACD,EAAUE,cAAe,CACxBC,KAAMC,SACGC,EAAAA,MAAAA,MAAAA,kBAA8B,CACnCC,KAAM,IAAIC,EAAAA,KAAAA,UAAexC,EAAKuC,MAC9BE,MAAO,IAAID,EAAAA,KAAAA,UAAexC,EAAKyC,UAIrC,CAACR,EAAUS,YAAa,CACtBN,KAAMC,UACJ,MAAM,KAAEM,GAASC,OAAOC,OAClBC,QAAiBH,EAAKI,YAAY/C,EAAKuC,MAC7C,OAAOS,EAAAA,QAAAA,WAAgBhD,EAAKiD,OAAQH,EAASI,c,8JCXnD,MAAMC,EAAkB,SAiDlBC,EAAY,CAACpB,EAAad,KAC9B,OAAQA,GACN,IAAK,KAEL,IAAK,MACH,OAAOmC,OAAOrB,GAChB,IAAK,MACH,OAAO,IAAIsB,EAAAA,GAAGtB,GAChB,QACE,MAAM,IAAIuB,MAAM,wBAA0BrC,KAyBnCsC,EAAuBnB,MAClCoB,EACAC,KAEA,MAAMC,OApFYF,KAClB,MAAMG,EAAa,IAAIC,EAAAA,WAAWC,EAAAA,IAAK,CAAEC,WAAY,cAC/CC,EAAW,IAAIC,EAAAA,eAAeL,EAAY,IAAIM,EAAAA,EAAc,CAChEH,WAAY,cAEd,OAAO,IAAII,EAAAA,QACT,CACEC,aAAc,CACZ,CACEC,KAAMlB,EACNmB,SAAUb,EAAYa,SACtBC,KAAMd,EAAYc,OAGtBF,KAAM,iBACNG,QAAS,SAEXf,EAAYgB,UACZT,IAkEoBU,CAAWjB,GAC3Ba,OA/DejC,OACrBoB,EACAC,KAEA,MAAMiB,EAAclB,EAAYa,SAC1BA,EAAsC,GAC5C,IAAK,MAAMM,KAAcD,EAEvB,IAAIE,EAAAA,EAAAA,IAA0BD,GAAa,CACzC,MAAME,EAAaF,EAAWG,KAAKC,QAC7BC,EAAgB,GACtB,IAAK,MAAMC,KAAOJ,EAChBG,EAASC,GAAOxB,EAAaoB,EAAWI,IAC1C,MAAMC,QAAoBjD,EAAAA,EAAe0C,EAAWG,KAAKV,MAAMjC,KAAK,IAC/D6C,IAELX,EAASM,EAAWP,MAAQc,OAE5Bb,EAASM,EAAWP,MAAQ,IAAIe,EAAAA,UAAU1B,EAAakB,EAAWP,OAGtE,OAAOC,GA0CgBe,CAAe5B,EAAaC,GAC7Ca,OA3BWlC,OACjBoB,EACAC,KAEA,MAAMa,EAAc,GACpB,IAAK,MAAMe,KAAO7B,EAAYc,KAAM,CAClC,IAAIvC,EAAW0B,EAAa4B,EAAIjB,MAChC,IAAIkB,EAAAA,EAAAA,IAAsBD,GAAM,CAC9B,MAAMR,EAAaQ,EAAIP,KAAKC,QACtBC,EAAgB,GACtB,IAAK,MAAMC,KAAOJ,EAChBG,EAASC,GAAOxB,EAAaoB,EAAWI,IAC1ClD,QAAYE,EAAAA,EAAeoD,EAAIP,KAAKV,MAAMjC,KAAK,IAC1C6C,IAGPV,EAAKiB,KAAKpC,EAAUpB,EAAKsD,EAAIpE,OAE/B,OAAOqD,GASYkB,CAAWhC,EAAaC,GACrCgC,QAAW/B,EAAQgC,QAAR,OAAiCvD,UAAK,KAASmC,GAC7DD,SAASA,GACTsB,cAEH,OADAF,EAAG1F,KAAO0F,EAAG1F,KAAK6F,MA5FO,EA4FmBH,EAAG1F,KAAK8F,QAC7CJ,ICxFPK,UAAU,MAAEC,IACVhB,EAAAA,EAESiB,EAAgB,KAC3B,MAAMvG,GAAWC,EAAAA,EAAAA,eACXuG,GAAUC,EAAAA,EAAAA,eACV,WAAElG,IAAeC,EAAAA,EAAAA,aAmBvB,MAAO,CAAEkG,SAjBOC,EAAAA,EAAAA,cACdhE,MAAOoB,EAA0BC,KAC/B,MAAMgC,QAAWlC,EAAqBC,EAAaC,GAC7C4C,ODgF4B,EACtC7C,EACAiC,KAEA,MAAMpB,EAAgD,GACtD,IAAK,IAAIiC,EAAI,EAAGA,EAAI9C,EAAYa,SAASwB,OAAQS,IAAK,CACpD,MAAMC,EAAS/C,EAAYa,SAASiC,GACpCjC,EAASkC,EAAOnC,MAAQ,CACtB5D,SAAU+F,EAAO/F,SACjBgG,SAAUD,EAAOC,SACjBC,WAAYF,EAAOG,MACnBxB,OAAQO,EAAGkB,KAAKL,GAAGpB,QAUvB,MAN+C,CAC7Cd,KAAMZ,EAAYY,KAClBrE,KAAM0F,EAAG1F,KACTsE,WACAG,UAAW,IAAIW,EAAAA,UAAU3B,EAAYgB,aCnGlBoC,CAAyBpD,EAAaiC,GAKvD,aAJMhG,GAASoH,EAAAA,EAAAA,IAAgBrD,EAAYY,aACrC3E,GAASqH,EAAAA,EAAAA,IAAMT,UACf5G,GAASsH,EAAAA,EAAAA,KAAW,UACpBtH,GAASa,EAAAA,EAAAA,IAAgBmD,IACxBwC,EAAQV,KAAM,QAAOQ,SAAa/F,oBAE3C,CAACA,EAAYP,EAAUwG,IAOPe,OAJJZ,EAAAA,EAAAA,cAAYhE,gBAClB3C,GAASwH,EAAAA,EAAAA,SACd,CAACxH,O,0ICvCC,IAAKyH,GAAZ,SAAYA,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,SAAAA,WAAAA,EAAAA,UAAAA,YAAAA,EAAAA,KAAAA,OAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAZ,CAAYA,IAAAA,EAAAA,KAYL,MAAMC,EAA6B,CACxC/C,KAAMgD,EAAAA,GAAAA,WACN/C,SAAU,CACR,CACED,KAAM8C,EAAcG,OACpBX,OAAO,EACPF,UAAU,EACVhG,UAAU,EACVsE,KAAM,CACJV,KAAMpC,EAAAA,EAAAA,aACN+C,QAAS,CAAEzC,KAAM4E,EAAc5E,KAAME,MAAO0E,EAAcG,UAG9D,CACEjD,KAAM8C,EAAcI,SACpBZ,OAAO,EACPF,UAAU,EACVhG,UAAU,EACVsE,KAAM,CACJV,KAAMpC,EAAAA,EAAAA,aACN+C,QAAS,CAAEzC,KAAM4E,EAAc5E,KAAME,MAAO0E,EAAcG,UAG9D,CACEjD,KAAM8C,EAAcK,UACpBb,OAAO,EACPF,UAAU,EACVhG,UAAU,IAGd8D,KAAM,CACJ,CAAEF,KAAM8C,EAAcM,KAAMvG,KAAM,MAClC,CACEmD,KAAM8C,EAAclE,OACpB/B,KAAM,MACN6D,KAAM,CACJV,KAAMpC,EAAAA,EAAAA,WACN+C,QAAS,CACP/B,OAAQkE,EAAclE,OACtBV,KAAM4E,EAAc5E,SAK5BkC,UAAWnC,EAAAA,MAAAA,MAAAA,iBAAAA,Y,0BChDb,MA4DA,EA5De,IAAgD,IAA/C,WAAErC,EAAa,IAA+B,EAC5D,MAAME,GAAUN,EAAAA,EAAAA,cAAaC,GAAoBA,EAAM4H,KAAKzH,KACtDyD,GAAe7D,EAAAA,EAAAA,cAAaC,GAAoBA,EAAMC,SAASC,QAE/D,QAAEoG,EAAF,MAAWa,IAAUhB,EAAAA,EAAAA,KAErB0B,GAAYtB,EAAAA,EAAAA,cAAYhE,UAC5B,MAAMuF,EAAc,CAClB,CAACT,EAAcM,MAAO,IACtB,CAACN,EAAcG,QAASnH,EAAQO,OAAOC,WACvC,CAACwG,EAAcK,WAAYrH,EAAQO,OAAOC,YAE5C,OAAOyF,EAAQgB,EAAe,IAAKQ,KAAgBlE,MAClD,CAAC0C,EAASjG,EAAQO,OAAQgD,IAEvBmE,GACHnE,EAAayD,EAAclE,WAC3B6E,EAAAA,EAAAA,WAAUpE,EAAayD,EAAcI,aACrC7D,EAAayD,EAAc5E,MAE9B,OACE,UAAC,EAAAwF,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAAC,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,KAAD,CACE5I,GAAI6H,EAAclE,OAClB1D,MAAM,SACNkC,QAAQ,SAAC,KAAD,CAAWnC,GAAI6H,EAAc5E,YAGzC,SAAC,EAAA0F,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,KAAD,CACE5I,GAAI6H,EAAcG,OAClB9H,aAAcW,EAAQO,OAAOC,WAC7BpB,MAAM,0BACN8B,YAAY,gCACZ8G,UAAQ,OAGZ,SAAC,EAAAF,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,KAAD,CACE5I,GAAI6H,EAAcI,SAClBhI,MAAM,4BACN8B,YAAY,uCAGhB,SAAC,EAAA4G,IAAD,CAAKC,KAAM,MACX,SAAC,EAAAD,IAAD,CAAKC,KAAM,GAAInH,MAAO,CAAEqH,UAAW,SAAnC,UACE,UAAC,EAAAxH,MAAD,YACE,SAAC,EAAAc,OAAD,CAAQR,KAAK,OAAOmH,QAASpB,EAA7B,oBAGA,SAAC,EAAAvF,OAAD,CAAQR,KAAK,UAAUmH,QAASV,EAAWE,SAAUA,EAArD","sources":["templates/components/addressInput.tsx","templates/components/mintInput.tsx","templates/components/numberInput.tsx","templates/core/rule.ts","templates/core/templateParser.ts","templates/hooks/useConfirmIdl.ts","templates/spl-approve/configs.ts","templates/spl-approve/create.tsx"],"sourcesContent":["import { Fragment, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\nimport { InputProps, Space, Typography, Input, Button } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\nimport { useDaoData } from 'hooks/dao'\n\ntype PropsAddressInput = {\n  id: string\n  title: string\n} & InputProps\n\nconst AddressInput = ({\n  id,\n  title,\n  defaultValue,\n  ...rest\n}: PropsAddressInput) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const daoData = useDaoData(daoAddress)\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  const isMaster = value === daoData?.master.toBase58()\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <Input\n        className=\"border-less\"\n        placeholder=\"Input Address\"\n        value={value}\n        onChange={(e) => dispatch(setTemplateData({ [id]: e.target.value }))}\n        prefix={\n          isMaster ? (\n            <Button\n              type=\"dashed\"\n              size=\"small\"\n              style={{ marginLeft: -4, marginRight: 2, borderWidth: 0.5 }}\n            >\n              Master\n            </Button>\n          ) : (\n            <Fragment />\n          )\n        }\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default AddressInput\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Space, Typography } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\nimport { MintSelection } from 'shared/antd/mint'\n\nconst MintInput = ({ id, title }: { id: string; title?: string }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      {title && <Typography.Text type=\"secondary\">{title}</Typography.Text>}\n      <MintSelection\n        value={value}\n        onChange={(value) => {\n          dispatch(setTemplateData({ [id]: value }))\n        }}\n        style={{ marginLeft: -7 }}\n      />\n    </Space>\n  )\n}\nexport default MintInput\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { InputProps, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\n\nconst NumberInput = ({\n  id,\n  title,\n  defaultValue,\n  ...rest\n}: { id: string; title: string } & InputProps) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <NumericInput\n        className=\"border-less\"\n        placeholder=\"Input Amount\"\n        defaultValue={value}\n        onValue={(val) => dispatch(setTemplateData({ [id]: val }))}\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default NumberInput\n","import { utils, web3 } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport enum RulesName {\n  'tokenAccount' = 'token-account',\n  'decimalize' = 'decimalize',\n}\n\nexport type RulesData = {\n  [RulesName.tokenAccount]: { mint: string; owner: string }\n  [RulesName.decimalize]: { mint: string; amount: string }\n}\nexport const TEMPLATE_RULES = {\n  [RulesName.tokenAccount]: {\n    call: async (data: RulesData[RulesName.tokenAccount]) => {\n      return utils.token.associatedAddress({\n        mint: new web3.PublicKey(data.mint),\n        owner: new web3.PublicKey(data.owner),\n      })\n    },\n  },\n  [RulesName.decimalize]: {\n    call: async (data: RulesData[RulesName.decimalize]) => {\n      const { splt } = window.sentre\n      const mintData = await splt.getMintData(data.mint)\n      return util.decimalize(data.amount, mintData.decimals)\n    },\n  },\n}\n","import { AnchorProvider, Program, BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js'\n\nimport { rpc } from '@sentre/senhub'\nimport SafeWallet from 'helpers/safeWallet'\nimport {\n  isTemplateAccountWithRule,\n  isTemplateArgWithRule,\n  TemplateArg,\n  TemplateIdl,\n} from 'templates'\nimport { TEMPLATE_RULES } from './rule'\nimport { ProposalAccountType, ProposalReturnType } from 'view/templates/types'\n\nconst DEFAULT_IX_NAME = 'ixname'\nconst ANCHOR_PREFIX_SIZE = 8\n\nconst getProgram = (templateIdl: TemplateIdl) => {\n  const connection = new Connection(rpc, { commitment: 'confirmed' })\n  const provider = new AnchorProvider(connection, new SafeWallet(), {\n    commitment: 'confirmed',\n  })\n  return new Program(\n    {\n      instructions: [\n        {\n          name: DEFAULT_IX_NAME,\n          accounts: templateIdl.accounts,\n          args: templateIdl.args,\n        },\n      ],\n      name: 'program-parser',\n      version: '0.0.0',\n    },\n    templateIdl.programId,\n    provider,\n  )\n}\n\nconst parserAccounts = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n): Promise<Record<string, PublicKey>> => {\n  const idlAccounts = templateIdl.accounts\n  const accounts: Record<string, PublicKey> = {}\n  for (const idlAccount of idlAccounts) {\n    // Build pubkey with template rule\n    if (isTemplateAccountWithRule(idlAccount)) {\n      const ruleConfig = idlAccount.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      const pubkey: any = await TEMPLATE_RULES[idlAccount.rule.name].call({\n        ...ruleData,\n      })\n      accounts[idlAccount.name] = pubkey\n    } else {\n      accounts[idlAccount.name] = new PublicKey(templateData[idlAccount.name])\n    }\n  }\n  return accounts\n}\n\nconst parserArg = (val: string, type: TemplateArg['type']) => {\n  switch (type) {\n    case 'u8':\n      return Number(val)\n    case 'u32':\n      return Number(val)\n    case 'u64':\n      return new BN(val)\n    default:\n      throw new Error('Invalid type of arg: ' + type)\n  }\n}\n\nconst parserArgs = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const args: any[] = []\n  for (const arg of templateIdl.args) {\n    let val: any = templateData[arg.name]\n    if (isTemplateArgWithRule(arg)) {\n      const ruleConfig = arg.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      val = await TEMPLATE_RULES[arg.rule.name].call({\n        ...ruleData,\n      })\n    }\n    args.push(parserArg(val, arg.type))\n  }\n  return args\n}\n\nexport const parserIxDataNoPrefix = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const program = await getProgram(templateIdl)\n  const accounts = await parserAccounts(templateIdl, templateData)\n  const args = await parserArgs(templateIdl, templateData)\n  const ix = await program.methods[DEFAULT_IX_NAME].call(this, ...args)\n    .accounts(accounts)\n    .instruction()\n  ix.data = ix.data.slice(ANCHOR_PREFIX_SIZE, ix.data.length)\n  return ix\n}\n\nexport const parserProposalReturnType = (\n  templateIdl: TemplateIdl,\n  ix: TransactionInstruction,\n): ProposalReturnType => {\n  const accounts: Record<string, ProposalAccountType> = {}\n  for (let i = 0; i < templateIdl.accounts.length; i++) {\n    const idlAcc = templateIdl.accounts[i]\n    accounts[idlAcc.name] = {\n      isMaster: idlAcc.isMaster,\n      isSigner: idlAcc.isSigner,\n      isWritable: idlAcc.isMut,\n      pubkey: ix.keys[i].pubkey,\n    }\n  }\n\n  const proposalReturnType: ProposalReturnType = {\n    name: templateIdl.name,\n    data: ix.data,\n    accounts,\n    programId: new PublicKey(templateIdl.programId),\n  }\n  return proposalReturnType\n}\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport configs from 'configs'\nimport { AppDispatch } from 'model'\nimport {\n  clearTemplate,\n  setTemplateData,\n  setTemplateName,\n  setTx,\n  setVisible,\n} from 'model/template.controller'\nimport { TemplateIdl } from '../index'\nimport {\n  parserIxDataNoPrefix,\n  parserProposalReturnType,\n} from '../core/templateParser'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n\n  const confirm = useCallback(\n    async (templateIdl: TemplateIdl, templateData: Record<string, string>) => {\n      const ix = await parserIxDataNoPrefix(templateIdl, templateData)\n      const tx = await parserProposalReturnType(templateIdl, ix)\n      await dispatch(setTemplateName(templateIdl.name))\n      await dispatch(setTx(tx))\n      await dispatch(setVisible(false))\n      await dispatch(setTemplateData(templateData))\n      return history.push(`/app/${appId}/dao/${daoAddress}/new-proposal`)\n    },\n    [daoAddress, dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { utils } from '@project-serum/anchor'\nimport { RulesName } from '../core/rule'\nimport { TemplateIdl, TemplateNames } from '../index'\n\nexport enum SplApproveIds {\n  // Accounts\n  source = 'source',\n  delegate = 'delegate',\n  authority = 'authority',\n  // Prams\n  code = 'code',\n  amount = 'amount',\n  // Context\n  mint = 'mint',\n}\n\nexport const SplApproveIdl: TemplateIdl = {\n  name: TemplateNames.SplApprove,\n  accounts: [\n    {\n      name: SplApproveIds.source,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n      rule: {\n        name: RulesName.tokenAccount,\n        configs: { mint: SplApproveIds.mint, owner: SplApproveIds.source },\n      },\n    },\n    {\n      name: SplApproveIds.delegate,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n      rule: {\n        name: RulesName.tokenAccount,\n        configs: { mint: SplApproveIds.mint, owner: SplApproveIds.source },\n      },\n    },\n    {\n      name: SplApproveIds.authority,\n      isMut: true,\n      isSigner: true,\n      isMaster: true,\n    },\n  ],\n  args: [\n    { name: SplApproveIds.code, type: 'u8' },\n    {\n      name: SplApproveIds.amount,\n      type: 'u64',\n      rule: {\n        name: RulesName.decimalize,\n        configs: {\n          amount: SplApproveIds.amount,\n          mint: SplApproveIds.mint,\n        },\n      },\n    },\n  ],\n  programId: utils.token.TOKEN_PROGRAM_ID.toBase58(),\n}\n","import { useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { isAddress } from '@interdao/core'\n\nimport { Button, Col, Row, Space } from 'antd'\nimport { NumberInput, MintInput, AddressInput } from 'templates/components'\n\nimport { AppState } from 'model'\nimport { SplApproveIdl, SplApproveIds } from '../spl-approve/configs'\nimport { PropsCreateComponent } from '../index'\nimport { useConfirmIdl } from '../hooks/useConfirmIdl'\n\nconst Create = ({ daoAddress = '' }: PropsCreateComponent) => {\n  const daoData = useSelector((state: AppState) => state.daos[daoAddress])\n  const templateData = useSelector((state: AppState) => state.template.data)\n\n  const { confirm, close } = useConfirmIdl()\n\n  const onConfirm = useCallback(async () => {\n    const defaultData = {\n      [SplApproveIds.code]: '4',\n      [SplApproveIds.source]: daoData.master.toBase58(),\n      [SplApproveIds.authority]: daoData.master.toBase58(),\n    }\n    return confirm(SplApproveIdl, { ...defaultData, ...templateData })\n  }, [confirm, daoData.master, templateData])\n\n  const disabled =\n    !templateData[SplApproveIds.amount] ||\n    !isAddress(templateData[SplApproveIds.delegate]) ||\n    !templateData[SplApproveIds.mint]\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <NumberInput\n          id={SplApproveIds.amount}\n          title=\"Amount\"\n          prefix={<MintInput id={SplApproveIds.mint} />}\n        />\n      </Col>\n      <Col span={24}>\n        <AddressInput\n          id={SplApproveIds.source}\n          defaultValue={daoData.master.toBase58()}\n          title=\"Source's Wallet Address\"\n          placeholder=\"Input Source's Wallet Address\"\n          readOnly\n        />\n      </Col>\n      <Col span={24}>\n        <AddressInput\n          id={SplApproveIds.delegate}\n          title=\"Delegate's Wallet Address\"\n          placeholder=\"Input Delegate's Wallet Address\"\n        />\n      </Col>\n      <Col span={24} />\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={onConfirm} disabled={disabled}>\n            Continue\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n"],"names":["id","title","defaultValue","rest","dispatch","useDispatch","value","useSelector","state","template","data","daoAddress","useParams","daoData","useDaoData","useEffect","undefined","setTemplateData","toString","isMaster","master","toBase58","Space","direction","size","style","width","Typography","type","Input","className","placeholder","onChange","e","target","prefix","Button","marginLeft","marginRight","borderWidth","Fragment","onValue","val","RulesName","TEMPLATE_RULES","tokenAccount","call","async","utils","mint","web3","owner","decimalize","splt","window","sentre","mintData","getMintData","util","amount","decimals","DEFAULT_IX_NAME","parserArg","Number","BN","Error","parserIxDataNoPrefix","templateIdl","templateData","program","connection","Connection","rpc","commitment","provider","AnchorProvider","SafeWallet","Program","instructions","name","accounts","args","version","programId","getProgram","idlAccounts","idlAccount","isTemplateAccountWithRule","ruleConfig","rule","configs","ruleData","key","pubkey","PublicKey","parserAccounts","arg","isTemplateArgWithRule","push","parserArgs","ix","methods","instruction","slice","length","manifest","appId","useConfirmIdl","history","useHistory","confirm","useCallback","tx","i","idlAcc","isSigner","isWritable","isMut","keys","parserProposalReturnType","setTemplateName","setTx","setVisible","close","clearTemplate","SplApproveIds","SplApproveIdl","TemplateNames","source","delegate","authority","code","daos","onConfirm","defaultData","disabled","isAddress","Row","gutter","Col","span","readOnly","textAlign","onClick"],"sourceRoot":""}