{"version":3,"file":"static/js/src_templates_view_embedded-view_info_tsx.45dbf689.chunk.js","mappings":"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","sources":["templates/components/addressInput.tsx","templates/components/numberInput.tsx","templates/components/mintInput.tsx","templates/components/templateForm.tsx","templates/view/embedded-view/info.tsx"],"sourcesContent":["import { Fragment, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport { Input, Button } from 'antd'\n\nimport { useDaoData } from 'hooks/dao'\n\nconst AddressInput = ({\n  id,\n  defaultValue,\n  value,\n  handleChange,\n  disabled,\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const daoData = useDaoData(daoAddress)\n\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  const isMaster = value === daoData?.master.toBase58()\n\n  return (\n    <Input\n      className=\"border-less\"\n      placeholder=\"Input Address\"\n      value={value}\n      onChange={(e) => handleChange(id, e.target.value)}\n      readOnly={disabled}\n      prefix={\n        isMaster ? (\n          <Button\n            type=\"dashed\"\n            size=\"small\"\n            style={{ marginLeft: -4, marginRight: 2, borderWidth: 0.5 }}\n          >\n            Master\n          </Button>\n        ) : (\n          <Fragment />\n        )\n      }\n    />\n  )\n}\nexport default AddressInput\n","import { useEffect } from 'react'\n\nimport { InputProps } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nconst NumberInput = ({\n  id,\n  value,\n  handleChange,\n  defaultValue,\n  disabled,\n  ...rest\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n} & InputProps) => {\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  return (\n    <NumericInput\n      className=\"border-less\"\n      placeholder=\"Input Amount\"\n      value={value}\n      onValue={(value) => handleChange(id, value)}\n      {...rest}\n      disabled={false}\n      readOnly={disabled}\n    />\n  )\n}\nexport default NumberInput\n","import { useEffect } from 'react'\n\nimport { MintSelection } from '@sen-use/app'\n\nconst MintInput = ({\n  id,\n  value,\n  handleChange,\n  defaultValue,\n  disabled,\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  return (\n    <MintSelection\n      disabled={disabled}\n      value={value}\n      onChange={(value) => handleChange(id, value)}\n      style={{ marginLeft: -7 }}\n    />\n  )\n}\nexport default MintInput\n","import { useCallback, useMemo } from 'react'\n\nimport { Col, Row, Space, Typography } from 'antd'\nimport AddressInput from './addressInput'\nimport NumberInput from './numberInput'\nimport MintInput from './mintInput'\n\nexport type ComponentConfigs<T extends string> = {\n  id: T\n  type: 'number' | 'address' | 'mint-select'\n  disabled?: boolean\n  title?: string\n  prefix?: ComponentConfigs<T>\n}\nexport type RenderComponentProps = {\n  templateData: Record<string, string>\n  configs: ComponentConfigs<keyof RenderComponentProps['templateData']>\n  onChange: (keidy: string, value: string) => void\n}\n\nexport type TemplateData<T extends string> = Record<T, string>\n\nexport type TemplateFormProps = {\n  components: ComponentConfigs<any>[]\n  templateData: Record<string, string>\n  onChange: (templateData: any) => void\n}\n\nconst RenderComponent = ({\n  configs,\n  templateData,\n  onChange,\n}: RenderComponentProps) => {\n  const { id, prefix, type, disabled } = configs\n\n  const value = templateData[id]\n\n  const prefixComponent = useMemo(() => {\n    if (!prefix) return\n    return (\n      <RenderComponent\n        configs={{ ...prefix, disabled }}\n        onChange={onChange}\n        templateData={templateData}\n      />\n    )\n  }, [disabled, onChange, prefix, templateData])\n\n  const componentProps = useMemo(() => {\n    return {\n      handleChange: onChange,\n      prefix: prefixComponent,\n      id,\n      value,\n      disabled,\n    }\n  }, [disabled, id, onChange, prefixComponent, value])\n\n  if (type === 'number') return <NumberInput {...componentProps} />\n  if (type === 'mint-select') return <MintInput {...componentProps} />\n  if (type === 'address') return <AddressInput {...componentProps} />\n  return null\n}\n\nconst TemplateForm = ({\n  onChange,\n  components,\n  templateData,\n}: TemplateFormProps) => {\n  const onChangeComponent = useCallback(\n    (id: string, value: string) => {\n      onChange({ ...templateData, [id]: value })\n    },\n    [onChange, templateData],\n  )\n\n  return (\n    <Row gutter={[24, 24]}>\n      {components.map((configs) => {\n        return (\n          <Col span={24} key={configs.id}>\n            <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n              {configs.title && (\n                <Typography.Text type=\"secondary\">\n                  {configs.title}\n                </Typography.Text>\n              )}\n              <RenderComponent\n                configs={configs}\n                onChange={onChangeComponent}\n                templateData={templateData}\n              />\n            </Space>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n\nexport default TemplateForm\n\nexport const TemplateInfo = ({\n  components,\n  templateData,\n}: TemplateFormProps) => {\n  return (\n    <Row gutter={[24, 24]}>\n      {components.map((configs) => {\n        return (\n          <Col span={24} key={configs.id}>\n            <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n              {configs.title && (\n                <Typography.Text type=\"secondary\">\n                  {configs.title}\n                </Typography.Text>\n              )}\n              <RenderComponent\n                configs={{ ...configs, disabled: true }}\n                onChange={() => {}}\n                templateData={templateData}\n              />\n            </Space>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n","import { Col, Row, Spin } from 'antd'\nimport { PropsTemplateProposalLoader } from '../../templateLoader'\nimport { TemplateInfo } from 'templates/components/templateForm'\n\nimport useProposalMetaData from 'hooks/proposal/useProposalMetaData'\n\nconst Info = ({ proposalAddress }: PropsTemplateProposalLoader) => {\n  const proposalMetaData = useProposalMetaData(proposalAddress)\n  const templateData = proposalMetaData.metaData?.templateData\n\n  if (!templateData) return <Spin spinning />\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <TemplateInfo\n          templateData={templateData}\n          components={[\n            {\n              id: 'url',\n              type: 'address',\n              title: 'URL',\n            },\n            {\n              id: 'appId',\n              type: 'address',\n              title: 'App ID',\n            },\n          ]}\n          onChange={() => {}}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Info\n"],"names":["id","defaultValue","value","handleChange","disabled","daoAddress","useParams","daoData","useDaoData","useEffect","isMaster","master","toBase58","Input","className","placeholder","onChange","e","target","readOnly","prefix","Button","type","size","style","marginLeft","marginRight","borderWidth","Fragment","rest","onValue","RenderComponent","configs","templateData","prefixComponent","useMemo","componentProps","components","onChangeComponent","useCallback","Row","gutter","map","Col","span","Space","direction","width","title","Typography","TemplateInfo","proposalAddress","useProposalMetaData","metaData","Spin","spinning"],"sourceRoot":""}