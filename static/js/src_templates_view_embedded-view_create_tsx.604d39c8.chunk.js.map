{"version":3,"file":"static/js/src_templates_view_embedded-view_create_tsx.604d39c8.chunk.js","mappings":"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","sources":["templates/hooks/useConfirmIdl.ts","templates/view/embedded-view/configs.ts","../../src/index.tsx","templates/view/embedded-view/create.tsx"],"sourcesContent":["import { useHistory } from 'react-router-dom'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { web3 } from '@project-serum/anchor'\n\nimport { AppDispatch } from 'model'\nimport { clearTemplate, confirmTemplate } from 'model/template.controller'\n\nimport { TemplateConfig } from '../constant/index'\nimport { APP_ROUTE } from 'configs/route'\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n\n  const confirm = useCallback(\n    async (\n      daoAddress: string,\n      templateConfig: TemplateConfig<any>,\n      templateData: Record<string, string>,\n      transactions: web3.Transaction[],\n    ) => {\n      const defaultPublickey = web3.Keypair.generate().publicKey\n      const serializedTxs = transactions.map((transaction) => {\n        // Fix for serialize is require recentBlockhash + feePayer\n        transaction.recentBlockhash = defaultPublickey.toBase58()\n        transaction.feePayer = defaultPublickey\n        // Serialize transaction base64\n        return transaction\n          .serialize({\n            requireAllSignatures: false,\n          })\n          .toString('base64')\n      })\n      const template = {\n        templateConfig,\n        templateData,\n        serializedTxs,\n        daoAddress,\n      }\n      await dispatch(confirmTemplate(template))\n      history.push(APP_ROUTE.createProposal.generatePath({}))\n    },\n    [dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import {\n  ComponentConfigs,\n  TemplateData,\n} from 'templates/components/templateForm'\nimport { TemplateConfig, TemplateNames } from '../../constant'\n\nexport type IDS = 'title' | 'url' | 'logo' | 'appId'\nexport const COMPONENT_CONFIGS: ComponentConfigs<IDS>[] = []\n\nexport const TEMPLATE_CONFIGS: TemplateConfig<IDS> = {\n  name: TemplateNames.EmbeddedView,\n  title: 'EmbeddedView',\n  components: COMPONENT_CONFIGS,\n}\n\nexport type EmbeddedViewData = TemplateData<IDS>\n",null,"import { useCallback, useMemo, useState } from 'react'\nimport { web3 } from '@project-serum/anchor'\nimport EmbeddedView from '@sentre/embeded-view'\n\nimport { Button, Col, Modal, Row, Space } from 'antd'\nimport { TemplateData } from 'templates/components/templateForm'\n\nimport { TEMPLATE_CONFIGS, IDS } from './configs'\nimport { PropsCreateComponent } from 'templates/constant'\nimport { useConfirmIdl } from 'templates/hooks/useConfirmIdl'\nimport { useDaoData } from 'hooks/dao'\n\ntype NativeTemplateData = TemplateData<IDS>\n\nconst Create = ({\n  daoAddress = '',\n  defaultData,\n}: PropsCreateComponent<NativeTemplateData>) => {\n  const [visible, setVisible] = useState(false)\n  const daoData = useDaoData(daoAddress)\n  const { confirm, close } = useConfirmIdl()\n\n  const handleConfirmTransaction = useCallback(\n    async (txs: web3.Transaction[]) => {\n      setVisible(false)\n      return confirm(\n        daoAddress,\n        { ...TEMPLATE_CONFIGS, title: defaultData?.title! },\n        { ...defaultData },\n        txs,\n      )\n    },\n    [confirm, daoAddress, defaultData],\n  )\n\n  const daoWallet: WalletInterface = useMemo(() => {\n    const masterAddress = daoData?.master.toBase58()\n    return {\n      ...window.sentre.solana,\n      disconnect: async () => {\n        setVisible(false)\n      },\n      signAllTransactions: async (txs) => {\n        handleConfirmTransaction(txs)\n        throw new Error(\"Dao Wallet can't sign transaction\")\n      },\n      signTransaction: async (tx) => {\n        handleConfirmTransaction([tx])\n        throw new Error(\"Dao Wallet can't sign transaction\")\n      },\n      getAddress: async () => masterAddress!,\n    }\n  }, [daoData?.master, handleConfirmTransaction])\n\n  if (!defaultData) return null\n  return (\n    <Row gutter={[24, 24]}>\n      <Modal\n        title={'InterDao Wallet'}\n        open={visible}\n        style={{\n          top: 0,\n          minWidth: '100vw',\n          maxWidth: '100vw',\n          width: '100vw',\n          height: '100vh',\n          minHeight: '100vh',\n          maxHeight: '100vh',\n        }}\n        bodyStyle={{\n          width: '100%',\n          height: 'calc(100vh - 55px)',\n          maxHeight: '100%',\n          minHeight: '100%',\n          paddingLeft: 12,\n        }}\n        footer={null}\n        onCancel={() => setVisible(false)}\n      >\n        <EmbeddedView\n          wallet={daoWallet}\n          appId={defaultData.appId}\n          src={defaultData.url}\n          title=\"Inter Dao Master Wallet\"\n        />\n      </Modal>\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={() => setVisible(true)}>\n            Open Application\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n"],"names":["useConfirmIdl","dispatch","useDispatch","history","useHistory","confirm","useCallback","async","daoAddress","templateConfig","templateData","transactions","defaultPublickey","web3","publicKey","template","serializedTxs","map","transaction","recentBlockhash","toBase58","feePayer","serialize","requireAllSignatures","toString","confirmTemplate","push","APP_ROUTE","close","clearTemplate","TEMPLATE_CONFIGS","name","TemplateNames","title","components","_a","appId","src","wallet","_b","verbose","useEffect","Gateway","terminate","_jsx","id","style","height","margin","border","width","loading","allowFullScreen","defaultData","visible","setVisible","useState","daoData","useDaoData","handleConfirmTransaction","txs","daoWallet","useMemo","masterAddress","master","window","sentre","solana","disconnect","signAllTransactions","Error","signTransaction","tx","getAddress","Row","gutter","Modal","open","top","minWidth","maxWidth","minHeight","maxHeight","bodyStyle","paddingLeft","footer","onCancel","url","Col","span","textAlign","Space","Button","type","onClick"],"sourceRoot":""}