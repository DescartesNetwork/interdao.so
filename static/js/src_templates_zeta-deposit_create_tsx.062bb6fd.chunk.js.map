{"version":3,"file":"static/js/src_templates_zeta-deposit_create_tsx.062bb6fd.chunk.js","mappings":"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","sources":["templates/components/addressInput.tsx","templates/components/mintInput.tsx","templates/components/numberInput.tsx","templates/core/rule.ts","templates/core/templateParser.ts","templates/hooks/useConfirmIdl.ts","templates/zeta-create/zetaCreateHelper.ts","templates/zeta-deposit/configs.ts","templates/zeta-deposit/create.tsx","templates/zeta-deposit/zetaDepositHelper.ts"],"sourcesContent":["import { Fragment, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\n\nimport { InputProps, Space, Typography, Input, Button } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\nimport { useDaoData } from 'hooks/dao'\n\ntype PropsAddressInput = {\n  id: string\n  title: string\n} & InputProps\n\nconst AddressInput = ({\n  id,\n  title,\n  defaultValue,\n  ...rest\n}: PropsAddressInput) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const daoData = useDaoData(daoAddress)\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  const isMaster = value === daoData?.master.toBase58()\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <Input\n        className=\"border-less\"\n        placeholder=\"Input Address\"\n        value={value}\n        onChange={(e) => dispatch(setTemplateData({ [id]: e.target.value }))}\n        prefix={\n          isMaster ? (\n            <Button\n              type=\"dashed\"\n              size=\"small\"\n              style={{ marginLeft: -4, marginRight: 2, borderWidth: 0.5 }}\n            >\n              Master\n            </Button>\n          ) : (\n            <Fragment />\n          )\n        }\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default AddressInput\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Space, Typography } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\nimport { MintSelection } from 'shared/antd/mint'\n\nconst MintInput = ({\n  id,\n  title,\n  defaultValue,\n  disabled = false,\n}: {\n  id: string\n  title?: string\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      {title && <Typography.Text type=\"secondary\">{title}</Typography.Text>}\n      <MintSelection\n        value={value}\n        onChange={(value) => {\n          dispatch(setTemplateData({ [id]: value }))\n        }}\n        style={{ marginLeft: -7 }}\n        disabled={disabled}\n      />\n    </Space>\n  )\n}\nexport default MintInput\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { InputProps, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setTemplateData } from 'model/template.controller'\n\nconst NumberInput = ({\n  id,\n  title,\n  defaultValue,\n  ...rest\n}: { id: string; title: string } & InputProps) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  useEffect(() => {\n    if (!!defaultValue && value === undefined)\n      dispatch(setTemplateData({ [id]: defaultValue.toString() }))\n  }, [defaultValue, dispatch, id, value])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <NumericInput\n        className=\"border-less\"\n        placeholder=\"Input Amount\"\n        defaultValue={value}\n        onValue={(val) => dispatch(setTemplateData({ [id]: val }))}\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default NumberInput\n","import { utils, web3 } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport enum RulesName {\n  'tokenAccount' = 'token-account',\n  'decimalize' = 'decimalize',\n}\n\nexport type RulesData = {\n  [RulesName.tokenAccount]: { mint: string; owner: string }\n  [RulesName.decimalize]: { mint: string; amount: string }\n}\nexport const TEMPLATE_RULES = {\n  [RulesName.tokenAccount]: {\n    call: async (data: RulesData[RulesName.tokenAccount]) => {\n      return utils.token.associatedAddress({\n        mint: new web3.PublicKey(data.mint),\n        owner: new web3.PublicKey(data.owner),\n      })\n    },\n  },\n  [RulesName.decimalize]: {\n    call: async (data: RulesData[RulesName.decimalize]) => {\n      const { splt } = window.sentre\n      const mintData = await splt.getMintData(data.mint)\n      return util.decimalize(data.amount, mintData.decimals)\n    },\n  },\n}\n","import { AnchorProvider, Program, BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js'\n\nimport { rpc } from '@sentre/senhub'\nimport SafeWallet from 'helpers/safeWallet'\nimport {\n  isTemplateAccountWithRule,\n  isTemplateArgWithRule,\n  TemplateArg,\n  TemplateIdl,\n} from 'templates'\nimport { TEMPLATE_RULES } from './rule'\nimport { ProposalAccountType, ProposalReturnType } from 'view/templates/types'\n\nconst ANCHOR_PREFIX_SIZE = 8\n\nconst getProgram = (templateIdl: TemplateIdl) => {\n  const connection = new Connection(rpc, { commitment: 'confirmed' })\n  const provider = new AnchorProvider(connection, new SafeWallet(), {\n    commitment: 'confirmed',\n  })\n  return new Program(\n    {\n      instructions: [\n        {\n          name: templateIdl.ixName,\n          accounts: templateIdl.accounts,\n          args: templateIdl.args,\n        },\n      ],\n      name: 'program-parser',\n      version: '0.0.0',\n    },\n    templateIdl.programId,\n    provider,\n  )\n}\n\nconst parserAccounts = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n): Promise<Record<string, PublicKey>> => {\n  const idlAccounts = templateIdl.accounts\n  const accounts: Record<string, PublicKey> = {}\n  for (const idlAccount of idlAccounts) {\n    // Build pubkey with template rule\n    if (isTemplateAccountWithRule(idlAccount)) {\n      const ruleConfig = idlAccount.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      const pubkey: any = await TEMPLATE_RULES[idlAccount.rule.name].call({\n        ...ruleData,\n      })\n      accounts[idlAccount.name] = pubkey\n    } else {\n      accounts[idlAccount.name] = new PublicKey(templateData[idlAccount.name])\n    }\n  }\n  return accounts\n}\n\nconst parserArg = (val: string, type: TemplateArg['type']) => {\n  switch (type) {\n    case 'u8':\n      return Number(val)\n    case 'u32':\n      return Number(val)\n    case 'u64':\n      return new BN(val)\n    default:\n      throw new Error('Invalid type of arg: ' + type)\n  }\n}\n\nconst parserArgs = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const args: any[] = []\n  for (const arg of templateIdl.args) {\n    let val: any = templateData[arg.name]\n    if (isTemplateArgWithRule(arg)) {\n      const ruleConfig = arg.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      val = await TEMPLATE_RULES[arg.rule.name].call({\n        ...ruleData,\n      })\n    }\n    args.push(parserArg(val, arg.type))\n  }\n  return args\n}\n\nexport const parserIxData = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const program = await getProgram(templateIdl)\n  const accounts = await parserAccounts(templateIdl, templateData)\n  const args = await parserArgs(templateIdl, templateData)\n  const ix = await program.methods[templateIdl.ixName]\n    .call(this, ...args)\n    .accounts(accounts)\n    .instruction()\n  if (!templateIdl.anchor)\n    ix.data = ix.data.slice(ANCHOR_PREFIX_SIZE, ix.data.length)\n\n  return ix\n}\n\nexport const parserProposalReturnType = (\n  templateIdl: TemplateIdl,\n  ix: TransactionInstruction,\n): ProposalReturnType => {\n  const accounts: Record<string, ProposalAccountType> = {}\n  for (let i = 0; i < templateIdl.accounts.length; i++) {\n    const idlAcc = templateIdl.accounts[i]\n    accounts[idlAcc.name] = {\n      isMaster: idlAcc.isMaster,\n      isSigner: idlAcc.isSigner,\n      isWritable: idlAcc.isMut,\n      pubkey: ix.keys[i].pubkey,\n    }\n  }\n\n  const proposalReturnType: ProposalReturnType = {\n    name: templateIdl.name,\n    data: ix.data,\n    accounts,\n    programId: new PublicKey(templateIdl.programId),\n  }\n  return proposalReturnType\n}\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport configs from 'configs'\nimport { AppDispatch } from 'model'\nimport {\n  clearTemplate,\n  setTemplateData,\n  setTemplateName,\n  setTx,\n  setVisible,\n} from 'model/template.controller'\nimport { TemplateIdl } from '../index'\nimport { parserIxData, parserProposalReturnType } from '../core/templateParser'\nimport useDaoNameUrl from 'hooks/dao/useDaoNameUrl'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const { daoNameUrl } = useDaoNameUrl(daoAddress)\n\n  const confirm = useCallback(\n    async (templateIdl: TemplateIdl, templateData: Record<string, string>) => {\n      const ix = await parserIxData(templateIdl, templateData)\n      const tx = await parserProposalReturnType(templateIdl, ix)\n      await dispatch(setTemplateName(templateIdl.name))\n      await dispatch(setTx(tx))\n      await dispatch(setVisible(false))\n      await dispatch(setTemplateData(templateData))\n      return history.push(\n        `/app/${appId}/dao/${daoAddress}/${daoNameUrl}/new-proposal`,\n      )\n    },\n    [daoAddress, daoNameUrl, dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { rpc, net } from '@sentre/senhub'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { web3 } from '@project-serum/anchor'\nimport { Exchange, Network, utils } from '@zetamarkets/sdk'\nimport { toPublicKey } from 'sentre-web3'\n\nexport const network = net as Network\nexport const PROGRAM_ID =\n  network === 'devnet'\n    ? new PublicKey('BG3oRikW8d16YjUEmX3ZxHm9SiJzrGtMhsSR8aCw1Cd7')\n    : new PublicKey('ZETAxsqBRek56DhiGXrn75yj2NHU3aYUnxvHXpkf3aD')\n\nexport type CreateInfo = {\n  zetaGroup: PublicKey\n  marginAccount: PublicKey\n  systemProgram: PublicKey\n  zetaProgram: PublicKey\n}\n\nexport const zetaCreateParams = async (\n  masterDaoAddress: string,\n): Promise<CreateInfo> => {\n  const connection = new Connection(rpc)\n  await Exchange.load(\n    PROGRAM_ID,\n    network,\n    connection,\n    utils.defaultCommitment(),\n    // Exchange wallet can be ignored for normal clients.\n    undefined,\n    // ThrottleMs - increase if you are running into rate limit issues on startup.\n    0,\n  )\n  const masterDaoPublicKey = toPublicKey(masterDaoAddress)\n  const programId = Exchange.programId\n  const zetaGroup = Exchange.zetaGroupAddress\n  const [marginAccount] = await utils.getMarginAccount(\n    programId,\n    zetaGroup,\n    masterDaoPublicKey,\n  )\n\n  return {\n    zetaGroup,\n    marginAccount,\n    systemProgram: web3.SystemProgram.programId,\n    zetaProgram: programId,\n  }\n}\n","import { RulesName } from '../core/rule'\nimport { TemplateIdl, TemplateNames } from '../index'\nimport { PROGRAM_ID } from '../zeta-create/zetaCreateHelper'\n\nexport enum ZetaDepositIds {\n  // Accounts\n  zetaGroup = 'zetaGroup',\n  marginAccount = 'marginAccount',\n  vault = 'vault',\n  userTokenAccount = 'userTokenAccount',\n  socializedLossAccount = 'socializedLossAccount',\n  authority = 'authority',\n  tokenProgram = 'tokenProgram',\n  state = 'state',\n  greeks = 'greeks',\n  // Params\n  amount = 'amount',\n  // Context\n  mint = 'zetaDepositMint',\n}\n\nexport const ZetaDepositIdl: TemplateIdl = {\n  name: TemplateNames.ZetaDeposit,\n  ixName: 'deposit',\n  anchor: true,\n  accounts: [\n    {\n      name: ZetaDepositIds.zetaGroup,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.marginAccount,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.vault,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.userTokenAccount,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.socializedLossAccount,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.authority,\n      isMut: false,\n      isSigner: true,\n      isMaster: true,\n    },\n    {\n      name: ZetaDepositIds.tokenProgram,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.state,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaDepositIds.greeks,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n  ],\n  args: [\n    {\n      name: ZetaDepositIds.amount,\n      type: 'u64',\n      rule: {\n        name: RulesName.decimalize,\n        configs: {\n          amount: ZetaDepositIds.amount,\n          mint: ZetaDepositIds.mint,\n        },\n      },\n    },\n  ],\n  programId: PROGRAM_ID.toBase58(),\n}\n","import { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { net } from '@sentre/senhub'\n\nimport { Button, Col, Empty, Row, Space } from 'antd'\nimport { NumberInput, MintInput } from 'templates/components'\n\nimport { AppState } from 'model'\nimport { ZetaDepositIdl, ZetaDepositIds } from './configs'\nimport { PropsCreateComponent } from '../index'\nimport { useConfirmIdl } from '../hooks/useConfirmIdl'\nimport { useDaoData } from 'hooks/dao'\nimport { zetaDepositParams } from './zetaDepositHelper'\n\nexport const USDC_MINT_ADDRESS = {\n  testnet: '',\n  devnet: '6PEh8n3p7BbCTykufbq1nSJYAZvUp6gSwEANAs1ZhsCX',\n  mainnet: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n}\n\nconst Create = ({ daoAddress = '' }: PropsCreateComponent) => {\n  const daoData = useDaoData(daoAddress)\n  const templateData = useSelector((state: AppState) => state.template.data)\n  const { confirm, close } = useConfirmIdl()\n  const [loading, setLoading] = useState(false)\n\n  const onConfirm = useCallback(async () => {\n    try {\n      if (!daoData) throw new Error('Invalid DAO data')\n      setLoading(true)\n      const {\n        zetaGroup,\n        marginAccount,\n        vault,\n        userTokenAccount,\n        socializedLossAccount,\n        authority,\n        tokenProgram,\n        state,\n        greeks,\n      } = await zetaDepositParams(daoData.master.toBase58())\n      const defaultData = {\n        [ZetaDepositIds.zetaGroup]: zetaGroup.toBase58(),\n        [ZetaDepositIds.marginAccount]: marginAccount.toBase58(),\n        [ZetaDepositIds.vault]: vault.toBase58(),\n        [ZetaDepositIds.userTokenAccount]: userTokenAccount.toBase58(),\n        [ZetaDepositIds.socializedLossAccount]:\n          socializedLossAccount.toBase58(),\n        [ZetaDepositIds.authority]: authority.toBase58(),\n        [ZetaDepositIds.tokenProgram]: tokenProgram.toBase58(),\n        [ZetaDepositIds.state]: state.toBase58(),\n        [ZetaDepositIds.greeks]: greeks.toBase58(),\n      }\n      return confirm(ZetaDepositIdl, { ...defaultData, ...templateData })\n    } catch (er: any) {\n      window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }, [confirm, daoData, templateData])\n\n  const disabled = !templateData[ZetaDepositIds.amount]\n\n  if (!daoData) return <Empty description=\"Invalid DAO data\" />\n\n  return (\n    <Row gutter={[24, 24]} justify=\"space-between\" style={{ height: '100%' }}>\n      <Col span={24}>\n        <NumberInput\n          id={ZetaDepositIds.amount}\n          title=\"Deposit\"\n          prefix={\n            <MintInput\n              id={ZetaDepositIds.mint}\n              defaultValue={USDC_MINT_ADDRESS[net]}\n              disabled={true}\n            />\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <Row style={{ height: '100%' }} align=\"bottom\">\n          <Col span={24} style={{ textAlign: 'right' }}>\n            <Space>\n              <Button type=\"text\" onClick={close}>\n                Close\n              </Button>\n              <Button\n                type=\"primary\"\n                onClick={onConfirm}\n                disabled={disabled}\n                loading={loading}\n              >\n                Continue\n              </Button>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n","import { utils as anchorUtils } from '@project-serum/anchor'\nimport { rpc } from '@sentre/senhub'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { Exchange, utils } from '@zetamarkets/sdk'\nimport { toPublicKey } from 'sentre-web3'\n\nimport { PROGRAM_ID, network } from '../zeta-create/zetaCreateHelper'\n\nexport type DepositInfo = {\n  zetaGroup: PublicKey\n  marginAccount: PublicKey\n  vault: PublicKey\n  userTokenAccount: PublicKey\n  socializedLossAccount: PublicKey\n  authority: PublicKey\n  tokenProgram: PublicKey\n  state: PublicKey\n  greeks: PublicKey\n}\n\nexport const zetaDepositParams = async (\n  masterDaoAddress: string,\n): Promise<DepositInfo> => {\n  const connection = new Connection(rpc)\n  await Exchange.load(\n    PROGRAM_ID,\n    network,\n    connection,\n    utils.defaultCommitment(),\n    // Exchange wallet can be ignored for normal clients.\n    undefined,\n    // ThrottleMs - increase if you are running into rate limit issues on startup.\n    0,\n  )\n  const masterDaoPublicKey = toPublicKey(masterDaoAddress)\n  const programId = Exchange.programId\n  const zetaGroup = Exchange.zetaGroupAddress\n  const [marginAccount] = await utils.getMarginAccount(\n    programId,\n    zetaGroup,\n    masterDaoPublicKey,\n  )\n  const vault = Exchange.vaultAddress\n  const userTokenAccount = await utils.getAssociatedTokenAddress(\n    Exchange.usdcMintAddress,\n    masterDaoPublicKey,\n  )\n  const socializedLossAccount = Exchange.socializedLossAccountAddress\n  const authority = masterDaoPublicKey\n  const tokenProgram = anchorUtils.token.TOKEN_PROGRAM_ID\n  const state = Exchange.stateAddress\n  const greeks = Exchange.zetaGroup.greeks\n\n  return {\n    zetaGroup: zetaGroup,\n    marginAccount,\n    vault,\n    userTokenAccount,\n    socializedLossAccount,\n    authority,\n    tokenProgram,\n    state,\n    greeks,\n  }\n}\n"],"names":["id","title","defaultValue","rest","dispatch","useDispatch","value","useSelector","state","template","data","daoAddress","useParams","daoData","useDaoData","useEffect","undefined","setTemplateData","toString","isMaster","master","toBase58","Space","direction","size","style","width","Typography","type","Input","className","placeholder","onChange","e","target","prefix","Button","marginLeft","marginRight","borderWidth","Fragment","disabled","onValue","val","RulesName","TEMPLATE_RULES","tokenAccount","call","async","utils","mint","web3","owner","decimalize","splt","window","sentre","mintData","getMintData","util","amount","decimals","parserArg","Number","BN","Error","parserIxData","templateIdl","templateData","program","connection","Connection","rpc","commitment","provider","AnchorProvider","SafeWallet","Program","instructions","name","ixName","accounts","args","version","programId","getProgram","idlAccounts","idlAccount","isTemplateAccountWithRule","ruleConfig","rule","configs","ruleData","key","pubkey","PublicKey","parserAccounts","arg","isTemplateArgWithRule","push","parserArgs","ix","methods","instruction","anchor","slice","length","manifest","appId","useConfirmIdl","history","useHistory","daoNameUrl","useDaoNameUrl","confirm","useCallback","tx","i","idlAcc","isSigner","isWritable","isMut","keys","parserProposalReturnType","setTemplateName","setTx","setVisible","close","clearTemplate","network","net","PROGRAM_ID","zetaCreateParams","Exchange","masterDaoPublicKey","toPublicKey","masterDaoAddress","zetaGroup","marginAccount","systemProgram","zetaProgram","ZetaDepositIds","ZetaDepositIdl","TemplateNames","vault","userTokenAccount","socializedLossAccount","authority","tokenProgram","greeks","USDC_MINT_ADDRESS","testnet","devnet","mainnet","loading","setLoading","useState","onConfirm","anchorUtils","zetaDepositParams","defaultData","er","notify","description","message","Row","gutter","justify","height","Col","span","align","textAlign","onClick","Empty"],"sourceRoot":""}