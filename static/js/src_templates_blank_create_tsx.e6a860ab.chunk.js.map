{"version":3,"file":"static/js/src_templates_blank_create_tsx.e6a860ab.chunk.js","mappings":"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","sources":["templates/blank/configs.ts","templates/blank/create.tsx","templates/core/rule.ts","templates/core/templateParser.ts","templates/hooks/useConfirmIdl.ts"],"sourcesContent":["import { web3 } from '@project-serum/anchor'\nimport { TemplateIdl, TemplateNames } from '../index'\n\nexport enum BlankIds {\n  // Accounts\n  source = 'source',\n  destination = 'destination',\n  authority = 'authority',\n  // Prams\n  code = 'code',\n  lamports = 'lamports',\n  // Context\n}\n\nexport const BlankIdl: TemplateIdl = {\n  name: TemplateNames.BlankTemplate,\n  ixName: TemplateNames.BlankTemplate,\n  anchor: false,\n  accounts: [\n    {\n      name: BlankIds.source,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: BlankIds.destination,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: BlankIds.authority,\n      isMut: true,\n      isSigner: true,\n      isMaster: true,\n    },\n  ],\n  args: [\n    { name: BlankIds.code, type: 'u32' },\n    {\n      name: BlankIds.lamports,\n      type: 'u64',\n    },\n  ],\n  programId: web3.SystemProgram.programId.toBase58(),\n}\n","import { useCallback } from 'react'\n\nimport { Button, Col, Row, Space } from 'antd'\n\nimport { BlankIdl, BlankIds } from '../blank/configs'\nimport { PropsCreateComponent } from '../index'\nimport { useConfirmIdl } from '../hooks/useConfirmIdl'\nimport { useDaoData } from 'hooks/dao'\n\nconst Create = ({ daoAddress = '' }: PropsCreateComponent) => {\n  const daoData = useDaoData(daoAddress)\n  const { confirm, close } = useConfirmIdl()\n\n  const onConfirm = useCallback(async () => {\n    try {\n      if (!daoData) throw new Error('Invalid Dao Data')\n      const defaultData: Record<string, string> = {\n        [BlankIds.code]: '2',\n        [BlankIds.lamports]: '0',\n        [BlankIds.source]: daoData.master.toBase58(),\n        [BlankIds.destination]: daoData.master.toBase58(),\n        [BlankIds.authority]: daoData.master.toBase58(),\n      }\n      return confirm(BlankIdl, { ...defaultData })\n    } catch (error: any) {\n      window.notify({ type: 'error', description: error.message })\n    }\n  }, [confirm, daoData])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={onConfirm}>\n            Continue\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n","import { utils, web3 } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport enum RulesName {\n  'tokenAccount' = 'token-account',\n  'decimalize' = 'decimalize',\n}\n\nexport type RulesData = {\n  [RulesName.tokenAccount]: { mint: string; owner: string }\n  [RulesName.decimalize]: { mint: string; amount: string }\n}\nexport const TEMPLATE_RULES = {\n  [RulesName.tokenAccount]: {\n    call: async (data: RulesData[RulesName.tokenAccount]) => {\n      return utils.token.associatedAddress({\n        mint: new web3.PublicKey(data.mint),\n        owner: new web3.PublicKey(data.owner),\n      })\n    },\n  },\n  [RulesName.decimalize]: {\n    call: async (data: RulesData[RulesName.decimalize]) => {\n      const { splt } = window.sentre\n      const mintData = await splt.getMintData(data.mint)\n      return util.decimalize(data.amount, mintData.decimals)\n    },\n  },\n}\n","import { AnchorProvider, Program, BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js'\n\nimport { rpc } from '@sentre/senhub'\nimport SafeWallet from 'helpers/safeWallet'\nimport {\n  isTemplateAccountWithRule,\n  isTemplateArgWithRule,\n  TemplateArg,\n  TemplateIdl,\n} from 'templates'\nimport { TEMPLATE_RULES } from './rule'\nimport { ProposalAccountType, ProposalReturnType } from 'view/templates/types'\n\nconst ANCHOR_PREFIX_SIZE = 8\n\nconst getProgram = (templateIdl: TemplateIdl) => {\n  const connection = new Connection(rpc, { commitment: 'confirmed' })\n  const provider = new AnchorProvider(connection, new SafeWallet(), {\n    commitment: 'confirmed',\n  })\n  return new Program(\n    {\n      instructions: [\n        {\n          name: templateIdl.ixName,\n          accounts: templateIdl.accounts,\n          args: templateIdl.args,\n        },\n      ],\n      name: 'program-parser',\n      version: '0.0.0',\n    },\n    templateIdl.programId,\n    provider,\n  )\n}\n\nconst parserAccounts = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n): Promise<Record<string, PublicKey>> => {\n  const idlAccounts = templateIdl.accounts\n  const accounts: Record<string, PublicKey> = {}\n  for (const idlAccount of idlAccounts) {\n    // Build pubkey with template rule\n    if (isTemplateAccountWithRule(idlAccount)) {\n      const ruleConfig = idlAccount.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      const pubkey: any = await TEMPLATE_RULES[idlAccount.rule.name].call({\n        ...ruleData,\n      })\n      accounts[idlAccount.name] = pubkey\n    } else {\n      accounts[idlAccount.name] = new PublicKey(templateData[idlAccount.name])\n    }\n  }\n  return accounts\n}\n\nconst parserArg = (val: string, type: TemplateArg['type']) => {\n  switch (type) {\n    case 'u8':\n      return Number(val)\n    case 'u32':\n      return Number(val)\n    case 'u64':\n      return new BN(val)\n    default:\n      throw new Error('Invalid type of arg: ' + type)\n  }\n}\n\nconst parserArgs = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const args: any[] = []\n  for (const arg of templateIdl.args) {\n    let val: any = templateData[arg.name]\n    if (isTemplateArgWithRule(arg)) {\n      const ruleConfig = arg.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      val = await TEMPLATE_RULES[arg.rule.name].call({\n        ...ruleData,\n      })\n    }\n    args.push(parserArg(val, arg.type))\n  }\n  return args\n}\n\nexport const parserIxData = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const program = await getProgram(templateIdl)\n  const accounts = await parserAccounts(templateIdl, templateData)\n  const args = await parserArgs(templateIdl, templateData)\n  const ix = await program.methods[templateIdl.ixName]\n    .call(this, ...args)\n    .accounts(accounts)\n    .instruction()\n  if (!templateIdl.anchor)\n    ix.data = ix.data.slice(ANCHOR_PREFIX_SIZE, ix.data.length)\n\n  return ix\n}\n\nexport const parserProposalReturnType = (\n  templateIdl: TemplateIdl,\n  ix: TransactionInstruction,\n): ProposalReturnType => {\n  const accounts: Record<string, ProposalAccountType> = {}\n  for (let i = 0; i < templateIdl.accounts.length; i++) {\n    const idlAcc = templateIdl.accounts[i]\n    accounts[idlAcc.name] = {\n      isMaster: idlAcc.isMaster,\n      isSigner: idlAcc.isSigner,\n      isWritable: idlAcc.isMut,\n      pubkey: ix.keys[i].pubkey,\n    }\n  }\n\n  const proposalReturnType: ProposalReturnType = {\n    name: templateIdl.name,\n    data: ix.data,\n    accounts,\n    programId: new PublicKey(templateIdl.programId),\n  }\n  return proposalReturnType\n}\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport configs from 'configs'\nimport { AppDispatch } from 'model'\nimport {\n  clearTemplate,\n  setTemplateData,\n  setTemplateName,\n  setTx,\n  setVisible,\n} from 'model/template.controller'\nimport { TemplateIdl } from '../index'\nimport { parserIxData, parserProposalReturnType } from '../core/templateParser'\nimport useDaoNameUrl from 'hooks/dao/useDaoNameUrl'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const { daoNameUrl } = useDaoNameUrl(daoAddress)\n\n  const confirm = useCallback(\n    async (templateIdl: TemplateIdl, templateData: Record<string, string>) => {\n      const ix = await parserIxData(templateIdl, templateData)\n      const tx = await parserProposalReturnType(templateIdl, ix)\n      await dispatch(setTemplateName(templateIdl.name))\n      await dispatch(setTx(tx))\n      await dispatch(setVisible(false))\n      await dispatch(setTemplateData(templateData))\n      return history.push(\n        `/app/${appId}/dao/${daoAddress}/${daoNameUrl}/new-proposal`,\n      )\n    },\n    [daoAddress, daoNameUrl, dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n"],"names":["BlankIds","BlankIdl","name","TemplateNames","ixName","anchor","accounts","source","isMut","isSigner","isMaster","destination","authority","args","code","type","lamports","programId","web3","daoAddress","daoData","useDaoData","confirm","close","useConfirmIdl","onConfirm","useCallback","async","Error","defaultData","master","toBase58","error","window","notify","description","message","Row","gutter","Col","span","style","textAlign","Space","Button","onClick","RulesName","TEMPLATE_RULES","tokenAccount","call","utils","mint","data","owner","decimalize","splt","sentre","mintData","getMintData","util","amount","decimals","parserArg","val","Number","BN","parserIxData","templateIdl","templateData","program","connection","Connection","rpc","commitment","provider","AnchorProvider","SafeWallet","Program","instructions","version","getProgram","idlAccounts","idlAccount","isTemplateAccountWithRule","ruleConfig","rule","configs","ruleData","key","pubkey","PublicKey","parserAccounts","arg","isTemplateArgWithRule","push","parserArgs","ix","methods","instruction","slice","length","manifest","appId","dispatch","useDispatch","history","useHistory","useParams","daoNameUrl","useDaoNameUrl","tx","i","idlAcc","isWritable","keys","parserProposalReturnType","setTemplateName","setTx","setVisible","setTemplateData","clearTemplate"],"sourceRoot":""}