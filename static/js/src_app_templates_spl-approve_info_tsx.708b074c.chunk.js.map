{"version":3,"file":"static/js/src_app_templates_spl-approve_info_tsx.708b074c.chunk.js","mappings":"qPAQA,MAsBA,EAtBiB,IAAmC,IAAlC,MAAEA,GAA+B,EACjD,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAQrC,OACE,SAAC,EAAAC,QAAD,CAASC,MAAM,SAASC,QAASL,EAAjC,UACE,SAAC,IAAD,CAAiBM,KAAMP,EAAvB,UACE,SAAC,IAAD,CACEQ,MAAO,CAAEC,OAAQ,WACjBC,KAAK,eACLC,QAZOC,UACbV,GAAU,SACJW,EAAAA,EAAAA,IAAU,MAChBX,GAAU,Y,2DCXP,MAAMY,EAAkCC,IAC7C,MAAOC,EAAcC,IAAmBd,EAAAA,EAAAA,UAAY,KAC9C,SAAEe,EAAF,QAAYC,IAAYC,EAAAA,EAAAA,GAAoBL,GAE5CM,GAAkBC,EAAAA,EAAAA,cAAY,IAC7BJ,IAAYC,GAAYD,EAASF,aAE/BC,EAAgBC,EAASF,cADvBC,EAAgB,KAExB,CAACE,EAASD,IAMb,OAJAK,EAAAA,EAAAA,YAAU,KACRF,MACC,CAACA,IAEGL,I,oJCJT,MAuEA,EAvEiB,IAAuD,IAAtD,gBAAED,GAAmD,EACrE,MAAMC,GACJF,EAAAA,EAAAA,GAA2DC,GAEvDS,EAAOR,EAAaQ,KACpBC,GAAWC,EAAAA,EAAAA,GAAgBF,IAAS,EACpCG,GAAqB,OAAZX,QAAY,IAAZA,OAAA,EAAAA,EAAcW,SAAU,GACjCC,GAAuB,OAAZZ,QAAY,IAAZA,OAAA,EAAAA,EAAcY,WAAY,GAE3C,OACE,UAAC,EAAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,IAAlB,WACE,SAAC,EAAAC,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,IAAD,CAAiBC,MAAM,WAAWjC,MAAM,mBAE1C,SAAC,EAAA+B,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,IAAD,CACEC,MAAM,QACNjC,OACE,UAAC,EAAAkC,MAAD,YACE,SAAC,KAAD,CAAYC,YAAaX,KACzB,SAAC,KAAD,CAAYW,YAAaX,YAKjC,SAAC,EAAAO,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,IAAD,CACEC,MAAM,SACNjC,MACGwB,EAEGY,EAAAA,MAAAA,aAAmBC,OAAOrB,EAAasB,QAASb,GADhD,UAKV,SAAC,EAAAM,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,IAAD,CACEC,MAAM,0BACNjC,OACE,UAAC,EAAAkC,MAAD,CAAOK,KAAM,GAAb,WACE,SAAC,EAAAC,WAAA,KAAD,CACEhC,MAAO,CAAEC,OAAQ,UAAWgC,eAAgB,aAC5C9B,QAAS,IAAM+B,OAAOC,MAAKC,EAAAA,EAAAA,IAASjB,GAAS,UAF/C,UAIGkB,EAAAA,EAAAA,IAAelB,MAElB,SAAC,IAAD,CAAU3B,MAAO2B,YAKzB,SAAC,EAAAI,IAAD,CAAKC,KAAM,GAAX,UACE,SAAC,IAAD,CACEC,MAAM,4BACNjC,OACE,UAAC,EAAAkC,MAAD,CAAOK,KAAM,GAAb,WACE,SAAC,EAAAC,WAAA,KAAD,CACEhC,MAAO,CAAEC,OAAQ,UAAWgC,eAAgB,aAC5C9B,QAAS,IAAM+B,OAAOC,MAAKC,EAAAA,EAAAA,IAAShB,GAAW,UAFjD,UAIGiB,EAAAA,EAAAA,IAAejB,MAElB,SAAC,IAAD,CAAU5B,MAAO4B","sources":["app/components/iconCopy.tsx","app/templates/hooks/useTemplateDataWithProposal.ts","app/templates/spl-approve/info.tsx"],"sourcesContent":["import { useState } from 'react'\nimport CopyToClipboard from 'react-copy-to-clipboard'\n\nimport { Tooltip } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { asyncWait } from 'shared/util'\n\nconst IconCopy = ({ value }: { value: string }) => {\n  const [copied, setCopied] = useState(false)\n\n  const onCopy = async () => {\n    setCopied(true)\n    await asyncWait(1500)\n    setCopied(false)\n  }\n\n  return (\n    <Tooltip title=\"Copied\" visible={copied}>\n      <CopyToClipboard text={value}>\n        <IonIcon\n          style={{ cursor: 'pointer' }}\n          name=\"copy-outline\"\n          onClick={onCopy}\n        />\n      </CopyToClipboard>\n    </Tooltip>\n  )\n}\n\nexport default IconCopy\n","import { useCallback, useEffect, useState } from 'react'\nimport useProposalMetaData from 'app/hooks/proposal/useProposalMetaData'\n\nexport const useTemplateDataWithProposal = <T>(proposalAddress: string) => {\n  const [templateData, setTemplateData] = useState<T>({} as T)\n  const { metaData, loading } = useProposalMetaData(proposalAddress)\n\n  const getTemplateName = useCallback(() => {\n    if (!metaData || loading || !metaData.templateData)\n      return setTemplateData({} as T)\n    return setTemplateData(metaData.templateData)\n  }, [loading, metaData])\n\n  useEffect(() => {\n    getTemplateName()\n  }, [getTemplateName])\n\n  return templateData\n}\n","import { utils } from '@senswap/sen-js'\n\nimport { Col, Row, Space, Typography } from 'antd'\nimport { MintAvatar, MintSymbol } from 'shared/antd/mint'\nimport { PropsTemplateProposalLoader } from '../templateLoader'\nimport RowSpaceBetween from 'app/components/rowSpaceBetween'\nimport IconCopy from 'app/components/iconCopy'\n\nimport { useTemplateDataWithProposal } from '../hooks/useTemplateDataWithProposal'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { SplApproveIds } from './configs'\nimport { explorer, shortenAddress } from 'shared/util'\n\nconst Proposal = ({ proposalAddress }: PropsTemplateProposalLoader) => {\n  const templateData =\n    useTemplateDataWithProposal<Record<SplApproveIds, string>>(proposalAddress)\n\n  const mint = templateData.mint\n  const decimals = useMintDecimals(mint) || 0\n  const source = templateData?.source || ''\n  const delegate = templateData?.delegate || ''\n\n  return (\n    <Row gutter={[12, 12]}>\n      <Col span={24}>\n        <RowSpaceBetween label=\"Template\" value=\"SPL/Approve\" />\n      </Col>\n      <Col span={24}>\n        <RowSpaceBetween\n          label=\"Token\"\n          value={\n            <Space>\n              <MintAvatar mintAddress={mint} />\n              <MintSymbol mintAddress={mint} />\n            </Space>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <RowSpaceBetween\n          label=\"Amount\"\n          value={\n            !mint\n              ? '--'\n              : utils.undecimalize(BigInt(templateData.amount), decimals)\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <RowSpaceBetween\n          label=\"Source's Wallet Address\"\n          value={\n            <Space size={10}>\n              <Typography.Text\n                style={{ cursor: 'pointer', textDecoration: 'underline' }}\n                onClick={() => window.open(explorer(source), '_blank')}\n              >\n                {shortenAddress(source)}\n              </Typography.Text>\n              <IconCopy value={source} />\n            </Space>\n          }\n        />\n      </Col>\n      <Col span={24}>\n        <RowSpaceBetween\n          label=\"Delegate's Wallet Address\"\n          value={\n            <Space size={10}>\n              <Typography.Text\n                style={{ cursor: 'pointer', textDecoration: 'underline' }}\n                onClick={() => window.open(explorer(delegate), '_blank')}\n              >\n                {shortenAddress(delegate)}\n              </Typography.Text>\n              <IconCopy value={delegate} />\n            </Space>\n          }\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Proposal\n"],"names":["value","copied","setCopied","useState","Tooltip","title","visible","text","style","cursor","name","onClick","async","asyncWait","useTemplateDataWithProposal","proposalAddress","templateData","setTemplateData","metaData","loading","useProposalMetaData","getTemplateName","useCallback","useEffect","mint","decimals","useMintDecimals","source","delegate","Row","gutter","Col","span","label","Space","mintAddress","utils","BigInt","amount","size","Typography","textDecoration","window","open","explorer","shortenAddress"],"sourceRoot":""}