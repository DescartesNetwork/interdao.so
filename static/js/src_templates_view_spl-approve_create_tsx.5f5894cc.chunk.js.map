{"version":3,"file":"static/js/src_templates_view_spl-approve_create_tsx.5f5894cc.chunk.js","mappings":"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","sources":["templates/components/addressInput.tsx","templates/components/numberInput.tsx","templates/components/mintInput.tsx","templates/components/templateForm.tsx","templates/hooks/useConfirmIdl.ts","templates/programs/spl-token.ts","templates/view/spl-approve/configs.ts","templates/view/spl-approve/create.tsx","../node_modules/react-use/esm/useSetState.js"],"sourcesContent":["import { Fragment, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport { Input, Button } from 'antd'\n\nimport { useDaoData } from 'hooks/dao'\n\nconst AddressInput = ({\n  id,\n  defaultValue,\n  value,\n  handleChange,\n  disabled,\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const daoData = useDaoData(daoAddress)\n\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  const isMaster = value === daoData?.master.toBase58()\n\n  return (\n    <Input\n      className=\"border-less\"\n      placeholder=\"Input Address\"\n      value={value}\n      onChange={(e) => handleChange(id, e.target.value)}\n      readOnly={disabled}\n      prefix={\n        isMaster ? (\n          <Button\n            type=\"dashed\"\n            size=\"small\"\n            style={{ marginLeft: -4, marginRight: 2, borderWidth: 0.5 }}\n          >\n            Master\n          </Button>\n        ) : (\n          <Fragment />\n        )\n      }\n    />\n  )\n}\nexport default AddressInput\n","import { useEffect } from 'react'\n\nimport { InputProps } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nconst NumberInput = ({\n  id,\n  value,\n  handleChange,\n  defaultValue,\n  disabled,\n  ...rest\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n} & InputProps) => {\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  return (\n    <NumericInput\n      className=\"border-less\"\n      placeholder=\"Input Amount\"\n      value={value}\n      onValue={(value) => handleChange(id, value)}\n      {...rest}\n      disabled={false}\n      readOnly={disabled}\n    />\n  )\n}\nexport default NumberInput\n","import { useEffect } from 'react'\n\nimport { MintSelection } from '@sen-use/app'\n\nconst MintInput = ({\n  id,\n  value,\n  handleChange,\n  defaultValue,\n  disabled,\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  return (\n    <MintSelection\n      disabled={disabled}\n      value={value}\n      onChange={(value) => handleChange(id, value)}\n      style={{ marginLeft: -7 }}\n    />\n  )\n}\nexport default MintInput\n","import { useCallback, useMemo } from 'react'\n\nimport { Col, Row, Space, Typography } from 'antd'\nimport AddressInput from './addressInput'\nimport NumberInput from './numberInput'\nimport MintInput from './mintInput'\n\nexport type ComponentConfigs<T extends string> = {\n  id: T\n  type: 'number' | 'address' | 'mint-select'\n  disabled?: boolean\n  title?: string\n  prefix?: ComponentConfigs<T>\n}\nexport type RenderComponentProps = {\n  templateData: Record<string, string>\n  configs: ComponentConfigs<keyof RenderComponentProps['templateData']>\n  onChange: (keidy: string, value: string) => void\n}\n\nexport type TemplateData<T extends string> = Record<T, string>\n\nexport type TemplateFormProps = {\n  components: ComponentConfigs<any>[]\n  templateData: Record<string, string>\n  onChange: (templateData: any) => void\n}\n\nconst RenderComponent = ({\n  configs,\n  templateData,\n  onChange,\n}: RenderComponentProps) => {\n  const { id, prefix, type, disabled } = configs\n\n  const value = templateData[id]\n\n  const prefixComponent = useMemo(() => {\n    if (!prefix) return\n    return (\n      <RenderComponent\n        configs={{ ...prefix, disabled }}\n        onChange={onChange}\n        templateData={templateData}\n      />\n    )\n  }, [disabled, onChange, prefix, templateData])\n\n  const componentProps = useMemo(() => {\n    return {\n      handleChange: onChange,\n      prefix: prefixComponent,\n      id,\n      value,\n      disabled,\n    }\n  }, [disabled, id, onChange, prefixComponent, value])\n\n  if (type === 'number') return <NumberInput {...componentProps} />\n  if (type === 'mint-select') return <MintInput {...componentProps} />\n  if (type === 'address') return <AddressInput {...componentProps} />\n  return null\n}\n\nconst TemplateForm = ({\n  onChange,\n  components,\n  templateData,\n}: TemplateFormProps) => {\n  const onChangeComponent = useCallback(\n    (id: string, value: string) => {\n      onChange({ ...templateData, [id]: value })\n    },\n    [onChange, templateData],\n  )\n\n  return (\n    <Row gutter={[24, 24]}>\n      {components.map((configs) => {\n        return (\n          <Col span={24} key={configs.id}>\n            <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n              {configs.title && (\n                <Typography.Text type=\"secondary\">\n                  {configs.title}\n                </Typography.Text>\n              )}\n              <RenderComponent\n                configs={configs}\n                onChange={onChangeComponent}\n                templateData={templateData}\n              />\n            </Space>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n\nexport default TemplateForm\n\nexport const TemplateInfo = ({\n  components,\n  templateData,\n}: TemplateFormProps) => {\n  return (\n    <Row gutter={[24, 24]}>\n      {components.map((configs) => {\n        return (\n          <Col span={24} key={configs.id}>\n            <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n              {configs.title && (\n                <Typography.Text type=\"secondary\">\n                  {configs.title}\n                </Typography.Text>\n              )}\n              <RenderComponent\n                configs={{ ...configs, disabled: true }}\n                onChange={() => {}}\n                templateData={templateData}\n              />\n            </Space>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n","import { useHistory } from 'react-router-dom'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { web3 } from '@project-serum/anchor'\n\nimport { AppDispatch } from 'model'\nimport { clearTemplate, confirmTemplate } from 'model/template.controller'\n\nimport { TemplateConfig } from '../constant/index'\nimport { APP_ROUTE } from 'configs/route'\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n\n  const confirm = useCallback(\n    async (\n      daoAddress: string,\n      templateConfig: TemplateConfig<any>,\n      templateData: Record<string, string>,\n      transactions: web3.Transaction[],\n    ) => {\n      const defaultPublickey = web3.Keypair.generate().publicKey\n      const serializedTxs = transactions.map((transaction) => {\n        // Fix for serialize is require recentBlockhash + feePayer\n        transaction.recentBlockhash = defaultPublickey.toBase58()\n        transaction.feePayer = defaultPublickey\n        // Serialize transaction base64\n        return transaction\n          .serialize({\n            requireAllSignatures: false,\n          })\n          .toString('base64')\n      })\n      const template = {\n        templateConfig,\n        templateData,\n        serializedTxs,\n        daoAddress,\n      }\n      await dispatch(confirmTemplate(template))\n      history.push(APP_ROUTE.createProposal.generatePath({}))\n    },\n    [dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { web3 } from '@project-serum/anchor'\n\ntype SplToken = {\n  version: '3.3.0'\n  name: 'spl_token'\n  instructions: [\n    {\n      name: 'initializeMint'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'decimals'\n          type: 'u8'\n        },\n        {\n          name: 'mintAuthority'\n          type: 'publicKey'\n        },\n        {\n          name: 'freezeAuthority'\n          type: {\n            defined: 'COption<Pubkey>'\n          }\n        },\n      ]\n    },\n    {\n      name: 'initializeAccount'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'initializeMultisig'\n      accounts: [\n        {\n          name: 'multisig'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'm'\n          type: 'u8'\n        },\n      ]\n    },\n    {\n      name: 'transfer'\n      accounts: [\n        {\n          name: 'source'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'destination'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'authority'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'approve'\n      accounts: [\n        {\n          name: 'source'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'delegate'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'revoke'\n      accounts: [\n        {\n          name: 'source'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'setAuthority'\n      accounts: [\n        {\n          name: 'owned'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n        {\n          name: 'signer'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'authorityType'\n          type: {\n            defined: 'AuthorityType'\n          }\n        },\n        {\n          name: 'newAuthority'\n          type: {\n            defined: 'COption<Pubkey>'\n          }\n        },\n      ]\n    },\n    {\n      name: 'mintTo'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'burn'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'authority'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'closeAccount'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'destination'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'freezeAccount'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'thawAccount'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'transferChecked'\n      accounts: [\n        {\n          name: 'source'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'destination'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'authority'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'decimals'\n          type: 'u8'\n        },\n      ]\n    },\n    {\n      name: 'approveChecked'\n      accounts: [\n        {\n          name: 'source'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'delegate'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'decimals'\n          type: 'u8'\n        },\n      ]\n    },\n    {\n      name: 'mintToChecked'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'owner'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'decimals'\n          type: 'u8'\n        },\n      ]\n    },\n    {\n      name: 'burnChecked'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'authority'\n          isMut: false\n          isSigner: true\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n        {\n          name: 'decimals'\n          type: 'u8'\n        },\n      ]\n    },\n    {\n      name: 'initializeAccount2'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n        {\n          name: 'rent'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'owner'\n          type: 'publicKey'\n        },\n      ]\n    },\n    {\n      name: 'syncNative'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'initializeAccount3'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'owner'\n          type: 'publicKey'\n        },\n      ]\n    },\n    {\n      name: 'initializeMultisig2'\n      accounts: [\n        {\n          name: 'multisig'\n          isMut: true\n          isSigner: false\n        },\n        {\n          name: 'signer'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'm'\n          type: 'u8'\n        },\n      ]\n    },\n    {\n      name: 'initializeMint2'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: true\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'decimals'\n          type: 'u8'\n        },\n        {\n          name: 'mintAuthority'\n          type: 'publicKey'\n        },\n        {\n          name: 'freezeAuthority'\n          type: {\n            defined: 'COption<Pubkey>'\n          }\n        },\n      ]\n    },\n    {\n      name: 'getAccountDataSize'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'initializeImmutableOwner'\n      accounts: [\n        {\n          name: 'account'\n          isMut: true\n          isSigner: false\n        },\n      ]\n      args: []\n    },\n    {\n      name: 'amountToUiAmount'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'amount'\n          type: 'u64'\n        },\n      ]\n    },\n    {\n      name: 'uiAmountToAmount'\n      accounts: [\n        {\n          name: 'mint'\n          isMut: false\n          isSigner: false\n        },\n      ]\n      args: [\n        {\n          name: 'uiAmount'\n          type: {\n            defined: \"&'astr\"\n          }\n        },\n      ]\n    },\n  ]\n  accounts: [\n    {\n      name: 'mint'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'mintAuthority'\n            type: {\n              defined: 'COption<Pubkey>'\n            }\n          },\n          {\n            name: 'supply'\n            type: 'u64'\n          },\n          {\n            name: 'decimals'\n            type: 'u8'\n          },\n          {\n            name: 'isInitialized'\n            type: 'bool'\n          },\n          {\n            name: 'freezeAuthority'\n            type: {\n              defined: 'COption<Pubkey>'\n            }\n          },\n        ]\n      }\n    },\n    {\n      name: 'account'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'mint'\n            type: 'publicKey'\n          },\n          {\n            name: 'owner'\n            type: 'publicKey'\n          },\n          {\n            name: 'amount'\n            type: 'u64'\n          },\n          {\n            name: 'delegate'\n            type: {\n              defined: 'COption<Pubkey>'\n            }\n          },\n          {\n            name: 'state'\n            type: {\n              defined: 'AccountState'\n            }\n          },\n          {\n            name: 'isNative'\n            type: {\n              defined: 'COption<u64>'\n            }\n          },\n          {\n            name: 'delegatedAmount'\n            type: 'u64'\n          },\n          {\n            name: 'closeAuthority'\n            type: {\n              defined: 'COption<Pubkey>'\n            }\n          },\n        ]\n      }\n    },\n    {\n      name: 'multisig'\n      type: {\n        kind: 'struct'\n        fields: [\n          {\n            name: 'm'\n            type: 'u8'\n          },\n          {\n            name: 'n'\n            type: 'u8'\n          },\n          {\n            name: 'isInitialized'\n            type: 'bool'\n          },\n          {\n            name: 'signers'\n            type: {\n              array: ['publicKey', 11]\n            }\n          },\n        ]\n      }\n    },\n  ]\n  types: [\n    {\n      name: 'AccountState'\n      type: {\n        kind: 'enum'\n        variants: [\n          {\n            name: 'Uninitialized'\n          },\n          {\n            name: 'Initialized'\n          },\n          {\n            name: 'Frozen'\n          },\n        ]\n      }\n    },\n    {\n      name: 'AuthorityType'\n      type: {\n        kind: 'enum'\n        variants: [\n          {\n            name: 'MintTokens'\n          },\n          {\n            name: 'FreezeAccount'\n          },\n          {\n            name: 'AccountOwner'\n          },\n          {\n            name: 'CloseAccount'\n          },\n        ]\n      }\n    },\n  ]\n  errors: [\n    {\n      code: 0\n      name: 'NotRentExempt'\n      msg: 'Lamport balance below rent-exempt threshold'\n    },\n    {\n      code: 1\n      name: 'InsufficientFunds'\n      msg: 'Insufficient funds'\n    },\n    {\n      code: 2\n      name: 'InvalidMint'\n      msg: 'Invalid Mint'\n    },\n    {\n      code: 3\n      name: 'MintMismatch'\n      msg: 'Account not associated with this Mint'\n    },\n    {\n      code: 4\n      name: 'OwnerMismatch'\n      msg: 'Owner does not match'\n    },\n    {\n      code: 5\n      name: 'FixedSupply'\n      msg: 'Fixed supply'\n    },\n    {\n      code: 6\n      name: 'AlreadyInUse'\n      msg: 'Already in use'\n    },\n    {\n      code: 7\n      name: 'InvalidNumberOfProvidedSigners'\n      msg: 'Invalid number of provided signers'\n    },\n    {\n      code: 8\n      name: 'InvalidNumberOfRequiredSigners'\n      msg: 'Invalid number of required signers'\n    },\n    {\n      code: 9\n      name: 'UninitializedState'\n      msg: 'State is unititialized'\n    },\n    {\n      code: 10\n      name: 'NativeNotSupported'\n      msg: 'Instruction does not support native tokens'\n    },\n    {\n      code: 11\n      name: 'NonNativeHasBalance'\n      msg: 'Non-native account can only be closed if its balance is zero'\n    },\n    {\n      code: 12\n      name: 'InvalidInstruction'\n      msg: 'Invalid instruction'\n    },\n    {\n      code: 13\n      name: 'InvalidState'\n      msg: 'State is invalid for requested operation'\n    },\n    {\n      code: 14\n      name: 'Overflow'\n      msg: 'Operation overflowed'\n    },\n    {\n      code: 15\n      name: 'AuthorityTypeNotSupported'\n      msg: 'Account does not support specified authority type'\n    },\n    {\n      code: 16\n      name: 'MintCannotFreeze'\n      msg: 'This token mint cannot freeze accounts'\n    },\n    {\n      code: 17\n      name: 'AccountFrozen'\n      msg: 'Account is frozen'\n    },\n    {\n      code: 18\n      name: 'MintDecimalsMismatch'\n      msg: 'The provided decimals value different from the Mint decimals'\n    },\n    {\n      code: 19\n      name: 'NonNativeNotSupported'\n      msg: 'Instruction does not support non-native tokens'\n    },\n  ]\n}\n\nexport const SPL_TOKEN_PROGRAM_ID = new web3.PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n)\n\nexport const SplTokenIDL: SplToken = {\n  version: '3.3.0',\n  name: 'spl_token',\n  instructions: [\n    {\n      name: 'initializeMint',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'decimals',\n          type: 'u8',\n        },\n        {\n          name: 'mintAuthority',\n          type: 'publicKey',\n        },\n        {\n          name: 'freezeAuthority',\n          type: {\n            defined: 'COption<Pubkey>',\n          },\n        },\n      ],\n    },\n    {\n      name: 'initializeAccount',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'initializeMultisig',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'm',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'transfer',\n      accounts: [\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'approve',\n      accounts: [\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'delegate',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'revoke',\n      accounts: [\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setAuthority',\n      accounts: [\n        {\n          name: 'owned',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'authorityType',\n          type: {\n            defined: 'AuthorityType',\n          },\n        },\n        {\n          name: 'newAuthority',\n          type: {\n            defined: 'COption<Pubkey>',\n          },\n        },\n      ],\n    },\n    {\n      name: 'mintTo',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'burn',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'closeAccount',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'freezeAccount',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'thawAccount',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'transferChecked',\n      accounts: [\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'decimals',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'approveChecked',\n      accounts: [\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'delegate',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'decimals',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'mintToChecked',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'decimals',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'burnChecked',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n        {\n          name: 'decimals',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeAccount2',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'owner',\n          type: 'publicKey',\n        },\n      ],\n    },\n    {\n      name: 'syncNative',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'initializeAccount3',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'owner',\n          type: 'publicKey',\n        },\n      ],\n    },\n    {\n      name: 'initializeMultisig2',\n      accounts: [\n        {\n          name: 'multisig',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'm',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeMint2',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'decimals',\n          type: 'u8',\n        },\n        {\n          name: 'mintAuthority',\n          type: 'publicKey',\n        },\n        {\n          name: 'freezeAuthority',\n          type: {\n            defined: 'COption<Pubkey>',\n          },\n        },\n      ],\n    },\n    {\n      name: 'getAccountDataSize',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'initializeImmutableOwner',\n      accounts: [\n        {\n          name: 'account',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'amountToUiAmount',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'amount',\n          type: 'u64',\n        },\n      ],\n    },\n    {\n      name: 'uiAmountToAmount',\n      accounts: [\n        {\n          name: 'mint',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'uiAmount',\n          type: {\n            defined: \"&'astr\",\n          },\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: 'mint',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'mintAuthority',\n            type: {\n              defined: 'COption<Pubkey>',\n            },\n          },\n          {\n            name: 'supply',\n            type: 'u64',\n          },\n          {\n            name: 'decimals',\n            type: 'u8',\n          },\n          {\n            name: 'isInitialized',\n            type: 'bool',\n          },\n          {\n            name: 'freezeAuthority',\n            type: {\n              defined: 'COption<Pubkey>',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'account',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'mint',\n            type: 'publicKey',\n          },\n          {\n            name: 'owner',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'delegate',\n            type: {\n              defined: 'COption<Pubkey>',\n            },\n          },\n          {\n            name: 'state',\n            type: {\n              defined: 'AccountState',\n            },\n          },\n          {\n            name: 'isNative',\n            type: {\n              defined: 'COption<u64>',\n            },\n          },\n          {\n            name: 'delegatedAmount',\n            type: 'u64',\n          },\n          {\n            name: 'closeAuthority',\n            type: {\n              defined: 'COption<Pubkey>',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'multisig',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'm',\n            type: 'u8',\n          },\n          {\n            name: 'n',\n            type: 'u8',\n          },\n          {\n            name: 'isInitialized',\n            type: 'bool',\n          },\n          {\n            name: 'signers',\n            type: {\n              array: ['publicKey', 11],\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'AccountState',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Uninitialized',\n          },\n          {\n            name: 'Initialized',\n          },\n          {\n            name: 'Frozen',\n          },\n        ],\n      },\n    },\n    {\n      name: 'AuthorityType',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'MintTokens',\n          },\n          {\n            name: 'FreezeAccount',\n          },\n          {\n            name: 'AccountOwner',\n          },\n          {\n            name: 'CloseAccount',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 0,\n      name: 'NotRentExempt',\n      msg: 'Lamport balance below rent-exempt threshold',\n    },\n    {\n      code: 1,\n      name: 'InsufficientFunds',\n      msg: 'Insufficient funds',\n    },\n    {\n      code: 2,\n      name: 'InvalidMint',\n      msg: 'Invalid Mint',\n    },\n    {\n      code: 3,\n      name: 'MintMismatch',\n      msg: 'Account not associated with this Mint',\n    },\n    {\n      code: 4,\n      name: 'OwnerMismatch',\n      msg: 'Owner does not match',\n    },\n    {\n      code: 5,\n      name: 'FixedSupply',\n      msg: 'Fixed supply',\n    },\n    {\n      code: 6,\n      name: 'AlreadyInUse',\n      msg: 'Already in use',\n    },\n    {\n      code: 7,\n      name: 'InvalidNumberOfProvidedSigners',\n      msg: 'Invalid number of provided signers',\n    },\n    {\n      code: 8,\n      name: 'InvalidNumberOfRequiredSigners',\n      msg: 'Invalid number of required signers',\n    },\n    {\n      code: 9,\n      name: 'UninitializedState',\n      msg: 'State is unititialized',\n    },\n    {\n      code: 10,\n      name: 'NativeNotSupported',\n      msg: 'Instruction does not support native tokens',\n    },\n    {\n      code: 11,\n      name: 'NonNativeHasBalance',\n      msg: 'Non-native account can only be closed if its balance is zero',\n    },\n    {\n      code: 12,\n      name: 'InvalidInstruction',\n      msg: 'Invalid instruction',\n    },\n    {\n      code: 13,\n      name: 'InvalidState',\n      msg: 'State is invalid for requested operation',\n    },\n    {\n      code: 14,\n      name: 'Overflow',\n      msg: 'Operation overflowed',\n    },\n    {\n      code: 15,\n      name: 'AuthorityTypeNotSupported',\n      msg: 'Account does not support specified authority type',\n    },\n    {\n      code: 16,\n      name: 'MintCannotFreeze',\n      msg: 'This token mint cannot freeze accounts',\n    },\n    {\n      code: 17,\n      name: 'AccountFrozen',\n      msg: 'Account is frozen',\n    },\n    {\n      code: 18,\n      name: 'MintDecimalsMismatch',\n      msg: 'The provided decimals value different from the Mint decimals',\n    },\n    {\n      code: 19,\n      name: 'NonNativeNotSupported',\n      msg: 'Instruction does not support non-native tokens',\n    },\n  ],\n}\n","import { ComponentConfigs } from 'templates/components/templateForm'\nimport { TemplateConfig, TemplateNames } from '../../constant'\n\nexport type IDS = 'viewAmount' | 'viewSource' | 'viewMint' | 'viewDelegate'\nexport const COMPONENT_CONFIGS: ComponentConfigs<IDS>[] = [\n  {\n    id: 'viewAmount',\n    type: 'number',\n    title: 'Amount',\n    prefix: {\n      id: 'viewMint',\n      type: 'mint-select',\n    },\n  },\n  {\n    id: 'viewSource',\n    type: 'address',\n    title: 'Source',\n    disabled: true,\n  },\n  {\n    id: 'viewDelegate',\n    type: 'address',\n    title: 'Delegate',\n  },\n]\n\nexport const TEMPLATE_CONFIGS: TemplateConfig<IDS> = {\n  name: TemplateNames.SplApprove,\n  title: 'SPL/Approve',\n  components: COMPONENT_CONFIGS,\n}\n","import { useSetState } from 'react-use'\nimport { utils, web3 } from '@project-serum/anchor'\nimport { Token } from '@solana/spl-token'\nimport { useGetMintDecimals } from '@sentre/senhub'\nimport { utilsBN } from '@sen-use/web3'\n\nimport { Button, Col, Row, Space } from 'antd'\nimport TemplateForm, { TemplateData } from 'templates/components/templateForm'\n\nimport { TEMPLATE_CONFIGS, IDS } from './configs'\nimport { PropsCreateComponent } from 'templates/constant'\nimport { useConfirmIdl } from 'templates/hooks/useConfirmIdl'\nimport { SPL_TOKEN_PROGRAM_ID } from 'templates/programs/spl-token'\nimport { useDaoData } from 'hooks/dao'\n\ntype NativeTemplateData = TemplateData<IDS>\n\nconst Create = ({\n  daoAddress = '',\n  defaultData,\n}: PropsCreateComponent<NativeTemplateData>) => {\n  const daoData = useDaoData(daoAddress)\n  const [formData, setFormData] = useSetState<NativeTemplateData>(\n    defaultData || {\n      viewAmount: '',\n      viewDelegate: '',\n      viewMint: '',\n      viewSource: daoData?.master.toBase58()!,\n    },\n  )\n  const { confirm, close } = useConfirmIdl()\n  const getMintDecimals = useGetMintDecimals()\n\n  const handleConfirm = async () => {\n    const tokenAccount = await utils.token.associatedAddress({\n      owner: new web3.PublicKey(formData.viewSource),\n      mint: new web3.PublicKey(formData.viewMint),\n    })\n    const decimals = await getMintDecimals({ mintAddress: formData.viewMint })\n    const amountBN = utilsBN.decimalize(formData.viewAmount, decimals!)\n\n    const tx = new web3.Transaction().add(\n      Token.createApproveInstruction(\n        SPL_TOKEN_PROGRAM_ID,\n        tokenAccount,\n        new web3.PublicKey(formData.viewDelegate),\n        new web3.PublicKey(formData.viewSource),\n        [],\n        amountBN.toNumber(),\n      ),\n    )\n    return confirm(daoAddress, TEMPLATE_CONFIGS, formData, [tx])\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <TemplateForm\n          templateData={formData}\n          components={TEMPLATE_CONFIGS.components}\n          onChange={setFormData}\n        />\n      </Col>\n      <Col span={24} />\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={handleConfirm}>\n            Continue\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n","import { useCallback, useState } from 'react';\nvar useSetState = function (initialState) {\n    if (initialState === void 0) { initialState = {}; }\n    var _a = useState(initialState), state = _a[0], set = _a[1];\n    var setState = useCallback(function (patch) {\n        set(function (prevState) {\n            return Object.assign({}, prevState, patch instanceof Function ? patch(prevState) : patch);\n        });\n    }, []);\n    return [state, setState];\n};\nexport default useSetState;\n"],"names":["id","defaultValue","value","handleChange","disabled","daoAddress","useParams","daoData","useDaoData","useEffect","isMaster","master","toBase58","Input","className","placeholder","onChange","e","target","readOnly","prefix","Button","type","size","style","marginLeft","marginRight","borderWidth","Fragment","rest","onValue","RenderComponent","configs","templateData","prefixComponent","useMemo","componentProps","components","onChangeComponent","useCallback","Row","gutter","map","Col","span","Space","direction","width","title","Typography","TemplateInfo","useConfirmIdl","dispatch","useDispatch","history","useHistory","confirm","async","templateConfig","transactions","defaultPublickey","web3","publicKey","template","serializedTxs","transaction","recentBlockhash","feePayer","serialize","requireAllSignatures","toString","confirmTemplate","push","APP_ROUTE","close","clearTemplate","SPL_TOKEN_PROGRAM_ID","TEMPLATE_CONFIGS","name","TemplateNames","defaultData","formData","setFormData","useSetState","viewAmount","viewDelegate","viewMint","viewSource","getMintDecimals","useGetMintDecimals","textAlign","onClick","tokenAccount","utils","owner","mint","decimals","mintAddress","amountBN","utilsBN","tx","add","Token","toNumber","initialState","_a","useState","state","set","patch","prevState","Object","assign","Function"],"sourceRoot":""}