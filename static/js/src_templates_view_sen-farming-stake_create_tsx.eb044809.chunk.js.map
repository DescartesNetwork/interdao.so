{"version":3,"file":"static/js/src_templates_view_sen-farming-stake_create_tsx.eb044809.chunk.js","mappings":"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","sources":["templates/components/addressInput.tsx","templates/components/numberInput.tsx","templates/components/mintInput.tsx","templates/components/templateForm.tsx","templates/hooks/useConfirmIdl.ts","templates/view/sen-farming-stake/configs.ts","templates/view/sen-farming-stake/create.tsx","templates/view/sen-farming-stake/useFarming.ts"],"sourcesContent":["import { Fragment, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport { Input, Button } from 'antd'\n\nimport { useDaoData } from 'hooks/dao'\n\nconst AddressInput = ({\n  id,\n  defaultValue,\n  value,\n  handleChange,\n  disabled,\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const daoData = useDaoData(daoAddress)\n\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  const isMaster = value === daoData?.master.toBase58()\n\n  return (\n    <Input\n      className=\"border-less\"\n      placeholder=\"Input Address\"\n      value={value}\n      onChange={(e) => handleChange(id, e.target.value)}\n      readOnly={disabled}\n      prefix={\n        isMaster ? (\n          <Button\n            type=\"dashed\"\n            size=\"small\"\n            style={{ marginLeft: -4, marginRight: 2, borderWidth: 0.5 }}\n          >\n            Master\n          </Button>\n        ) : (\n          <Fragment />\n        )\n      }\n    />\n  )\n}\nexport default AddressInput\n","import { useEffect } from 'react'\n\nimport { InputProps } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nconst NumberInput = ({\n  id,\n  value,\n  handleChange,\n  defaultValue,\n  disabled,\n  ...rest\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n} & InputProps) => {\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  return (\n    <NumericInput\n      className=\"border-less\"\n      placeholder=\"Input Amount\"\n      value={value}\n      onValue={(value) => handleChange(id, value)}\n      {...rest}\n      disabled={false}\n      readOnly={disabled}\n    />\n  )\n}\nexport default NumberInput\n","import { useEffect } from 'react'\n\nimport { MintSelection } from '@sen-use/app'\n\nconst MintInput = ({\n  id,\n  value,\n  handleChange,\n  defaultValue,\n  disabled,\n}: {\n  id: string\n  value: string\n  handleChange: (id: string, value: string) => void\n  defaultValue?: string\n  disabled?: boolean\n}) => {\n  useEffect(() => {\n    if (!!defaultValue) handleChange(id, defaultValue)\n  }, [defaultValue, id, handleChange])\n\n  return (\n    <MintSelection\n      disabled={disabled}\n      value={value}\n      onChange={(value) => handleChange(id, value)}\n      style={{ marginLeft: -7 }}\n    />\n  )\n}\nexport default MintInput\n","import { useCallback, useMemo } from 'react'\n\nimport { Col, Row, Space, Typography } from 'antd'\nimport AddressInput from './addressInput'\nimport NumberInput from './numberInput'\nimport MintInput from './mintInput'\n\nexport type ComponentConfigs<T extends string> = {\n  id: T\n  type: 'number' | 'address' | 'mint-select'\n  disabled?: boolean\n  title?: string\n  prefix?: ComponentConfigs<T>\n}\nexport type RenderComponentProps = {\n  templateData: Record<string, string>\n  configs: ComponentConfigs<keyof RenderComponentProps['templateData']>\n  onChange: (keidy: string, value: string) => void\n}\n\nexport type TemplateData<T extends string> = Record<T, string>\n\nexport type TemplateFormProps = {\n  components: ComponentConfigs<any>[]\n  templateData: Record<string, string>\n  onChange: (templateData: any) => void\n}\n\nconst RenderComponent = ({\n  configs,\n  templateData,\n  onChange,\n}: RenderComponentProps) => {\n  const { id, prefix, type, disabled } = configs\n\n  const value = templateData[id]\n\n  const prefixComponent = useMemo(() => {\n    if (!prefix) return\n    return (\n      <RenderComponent\n        configs={{ ...prefix, disabled }}\n        onChange={onChange}\n        templateData={templateData}\n      />\n    )\n  }, [disabled, onChange, prefix, templateData])\n\n  const componentProps = useMemo(() => {\n    return {\n      handleChange: onChange,\n      prefix: prefixComponent,\n      id,\n      value,\n      disabled,\n    }\n  }, [disabled, id, onChange, prefixComponent, value])\n\n  if (type === 'number') return <NumberInput {...componentProps} />\n  if (type === 'mint-select') return <MintInput {...componentProps} />\n  if (type === 'address') return <AddressInput {...componentProps} />\n  return null\n}\n\nconst TemplateForm = ({\n  onChange,\n  components,\n  templateData,\n}: TemplateFormProps) => {\n  const onChangeComponent = useCallback(\n    (id: string, value: string) => {\n      onChange({ ...templateData, [id]: value })\n    },\n    [onChange, templateData],\n  )\n\n  return (\n    <Row gutter={[24, 24]}>\n      {components.map((configs) => {\n        return (\n          <Col span={24} key={configs.id}>\n            <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n              {configs.title && (\n                <Typography.Text type=\"secondary\">\n                  {configs.title}\n                </Typography.Text>\n              )}\n              <RenderComponent\n                configs={configs}\n                onChange={onChangeComponent}\n                templateData={templateData}\n              />\n            </Space>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n\nexport default TemplateForm\n\nexport const TemplateInfo = ({\n  components,\n  templateData,\n}: TemplateFormProps) => {\n  return (\n    <Row gutter={[24, 24]}>\n      {components.map((configs) => {\n        return (\n          <Col span={24} key={configs.id}>\n            <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n              {configs.title && (\n                <Typography.Text type=\"secondary\">\n                  {configs.title}\n                </Typography.Text>\n              )}\n              <RenderComponent\n                configs={{ ...configs, disabled: true }}\n                onChange={() => {}}\n                templateData={templateData}\n              />\n            </Space>\n          </Col>\n        )\n      })}\n    </Row>\n  )\n}\n","import { useHistory } from 'react-router-dom'\nimport { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { web3 } from '@project-serum/anchor'\n\nimport { AppDispatch } from 'model'\nimport { clearTemplate, confirmTemplate } from 'model/template.controller'\n\nimport { TemplateConfig } from '../constant/index'\nimport { APP_ROUTE } from 'configs/route'\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n\n  const confirm = useCallback(\n    async (\n      daoAddress: string,\n      templateConfig: TemplateConfig<any>,\n      templateData: Record<string, string>,\n      transactions: web3.Transaction[],\n    ) => {\n      const defaultPublickey = web3.Keypair.generate().publicKey\n      const serializedTxs = transactions.map((transaction) => {\n        // Fix for serialize is require recentBlockhash + feePayer\n        transaction.recentBlockhash = defaultPublickey.toBase58()\n        transaction.feePayer = defaultPublickey\n        // Serialize transaction base64\n        return transaction\n          .serialize({\n            requireAllSignatures: false,\n          })\n          .toString('base64')\n      })\n      const template = {\n        templateConfig,\n        templateData,\n        serializedTxs,\n        daoAddress,\n      }\n      await dispatch(confirmTemplate(template))\n      history.push(APP_ROUTE.createProposal.generatePath({}))\n    },\n    [dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { Net } from '@sentre/senhub'\nimport { ComponentConfigs } from 'templates/components/templateForm'\nimport { TemplateConfig, TemplateNames } from '../../constant'\n\nexport type IDS = 'amount' | 'farm' | 'mint'\nexport const COMPONENT_CONFIGS: ComponentConfigs<IDS>[] = [\n  {\n    title: 'Farm Address',\n    type: 'address',\n    id: 'farm',\n  },\n  {\n    title: 'Amount',\n    type: 'number',\n    id: 'amount',\n    prefix: {\n      id: 'mint',\n      type: 'mint-select',\n      disabled: true,\n    },\n  },\n]\n\nexport const TEMPLATE_CONFIGS: TemplateConfig<IDS> = {\n  name: TemplateNames.SenFarmingStake,\n  title: 'Sen/Farming Stake',\n  components: COMPONENT_CONFIGS,\n}\n\ntype Conf = {\n  senFarmingProgram: string\n}\nexport const conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    senFarmingProgram: '6LaxnmWdYUAJvBJ4a1R8rrsvCRtaY7b43zKiNAU2k3Nx',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    senFarmingProgram: '6LaxnmWdYUAJvBJ4a1R8rrsvCRtaY7b43zKiNAU2k3Nx',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    senFarmingProgram: 'E6Vc9wipgm8fMXHEYwgN7gYdDbyvpPBUiTNy67zPKuF4',\n  },\n}\n","import { useCallback, useEffect } from 'react'\nimport { useSetState } from 'react-use'\nimport { web3 } from '@project-serum/anchor'\nimport { util } from '@sentre/senhub'\n\nimport { Button, Col, Row, Space } from 'antd'\nimport TemplateForm, { TemplateData } from 'templates/components/templateForm'\n\nimport { TEMPLATE_CONFIGS, IDS } from './configs'\nimport { PropsCreateComponent } from 'templates/constant'\nimport { useConfirmIdl } from 'templates/hooks/useConfirmIdl'\nimport { useDaoData } from 'hooks/dao'\nimport { notifyError } from 'helpers'\nimport { useFarming } from './useFarming'\n\ntype NativeTemplateData = TemplateData<IDS>\n\nconst Create = ({\n  daoAddress = '',\n  defaultData,\n}: PropsCreateComponent<NativeTemplateData>) => {\n  const daoData = useDaoData(daoAddress)\n  const [formData, setFormData] = useSetState<NativeTemplateData>(\n    defaultData || {\n      amount: '',\n      mint: '',\n      farm: '',\n    },\n  )\n  const { confirm, close } = useConfirmIdl()\n  const { getSenFarming, stake } = useFarming()\n\n  const updateMint = useCallback(async () => {\n    if (!util.isAddress(formData.farm)) return\n    const senFarming = getSenFarming(daoData?.master!)\n    const farmData = await senFarming.program.account.farm.fetch(formData.farm)\n    setFormData({ mint: farmData.inputMint.toBase58() })\n  }, [daoData?.master, formData.farm, getSenFarming, setFormData])\n  useEffect(() => {\n    updateMint()\n  }, [updateMint])\n\n  const handleConfirm = async () => {\n    try {\n      const txs = await stake({\n        inAmount: Number(formData.amount),\n        farm: new web3.PublicKey(formData.farm),\n        walletPublicKey: daoData?.master!,\n      })\n      return confirm(daoAddress, TEMPLATE_CONFIGS, formData, txs)\n    } catch (error) {\n      notifyError(error)\n    }\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <TemplateForm\n          templateData={formData}\n          components={TEMPLATE_CONFIGS.components}\n          onChange={setFormData}\n        />\n      </Col>\n      <Col span={24} />\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={handleConfirm}>\n            Continue\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n","import { useCallback } from 'react'\nimport { getAnchorProvider, net, useGetMintDecimals } from '@sentre/senhub'\nimport { web3, BN } from '@project-serum/anchor'\nimport { utilsBN } from '@sen-use/web3'\nimport SenFarming, { DebtData } from '@sentre/farming'\n\nimport { conf } from './configs'\n\ntype StakeProps = {\n  farm: web3.PublicKey\n  inAmount: number\n  walletPublicKey: web3.PublicKey // Master\n}\n\nexport const useFarming = () => {\n  const getMintDecimals = useGetMintDecimals()\n\n  const getSenFarming = useCallback((walletPublicKey: web3.PublicKey) => {\n    const programId = conf[net].senFarmingProgram\n    const provider = getAnchorProvider({\n      ...window.sentre.solana,\n      publicKey: walletPublicKey,\n    })!\n    return new SenFarming(provider, programId)\n  }, [])\n\n  const stake = useCallback(\n    async ({ inAmount, farm, walletPublicKey }: StakeProps) => {\n      const senFarming = getSenFarming(walletPublicKey)\n      const farmData = await senFarming.program.account.farm.fetch(farm)\n      //\n      const PDAs = await senFarming.deriveAllPDAs({\n        farm,\n      })\n      const decimals = await getMintDecimals({\n        mintAddress: farmData.inputMint.toBase58(),\n      })\n\n      let debtData: DebtData | null = null\n      try {\n        debtData = await senFarming.program.account.debt.fetch(PDAs.debt)\n      } catch (error) {}\n\n      // Validate\n      const listTxs: web3.Transaction[] = []\n      const depositAmount = !debtData ? new BN(0) : debtData.shares\n      const leverage = !debtData ? new BN(1) : debtData.leverage\n\n      // Initialize debt if needed\n      if (!debtData) {\n        const { tx } = await senFarming.initializeDebt({\n          farm,\n          sendAndConfirm: false,\n        })\n        listTxs.push(tx)\n      }\n\n      // Unstake + Withdraw all\n      const txUnstakeWithdraw = new web3.Transaction()\n      const { tx: txUnstake } = await senFarming.unstake({\n        farm,\n        sendAndConfirm: false,\n      })\n\n      const { tx: txWithdraw } = await senFarming.withdraw({\n        farm,\n        shares: depositAmount,\n        sendAndConfirm: false,\n      })\n      txUnstakeWithdraw.add(txUnstake)\n      txUnstakeWithdraw.add(txWithdraw)\n\n      // Calc amountBN deposit\n      const amountBN = utilsBN.decimalize(inAmount, decimals!)\n      const oldAmount = depositAmount.mul(new BN(10 ** 9)).div(leverage)\n\n      // Deposit + Stake\n      const txDepositStake = new web3.Transaction()\n      const { tx: txDeposit } = await senFarming.deposit({\n        farm,\n        inAmount: amountBN.add(oldAmount),\n        sendAndConfirm: false,\n      })\n      const { tx: txStake } = await senFarming.stake({\n        farm,\n        sendAndConfirm: false,\n      })\n      txDepositStake.add(txDeposit)\n      txDepositStake.add(txStake)\n      listTxs.push(txDepositStake)\n\n      return listTxs\n    },\n    [getMintDecimals, getSenFarming],\n  )\n\n  return { stake, getSenFarming }\n}\n"],"names":["id","defaultValue","value","handleChange","disabled","daoAddress","useParams","daoData","useDaoData","useEffect","isMaster","master","toBase58","Input","className","placeholder","onChange","e","target","readOnly","prefix","Button","type","size","style","marginLeft","marginRight","borderWidth","Fragment","rest","onValue","RenderComponent","configs","templateData","prefixComponent","useMemo","componentProps","components","onChangeComponent","useCallback","Row","gutter","map","Col","span","Space","direction","width","title","Typography","TemplateInfo","useConfirmIdl","dispatch","useDispatch","history","useHistory","confirm","async","templateConfig","transactions","defaultPublickey","web3","publicKey","template","serializedTxs","transaction","recentBlockhash","feePayer","serialize","requireAllSignatures","toString","confirmTemplate","push","APP_ROUTE","close","clearTemplate","TEMPLATE_CONFIGS","name","TemplateNames","conf","devnet","senFarmingProgram","testnet","mainnet","defaultData","formData","setFormData","useSetState","amount","mint","farm","getSenFarming","stake","getMintDecimals","useGetMintDecimals","walletPublicKey","programId","net","provider","getAnchorProvider","window","sentre","solana","SenFarming","inAmount","senFarming","farmData","program","account","fetch","PDAs","deriveAllPDAs","decimals","mintAddress","inputMint","debtData","debt","error","listTxs","depositAmount","shares","BN","leverage","tx","initializeDebt","sendAndConfirm","txUnstakeWithdraw","txUnstake","unstake","txWithdraw","withdraw","add","amountBN","utilsBN","oldAmount","mul","div","txDepositStake","txDeposit","deposit","txStake","useFarming","updateMint","util","textAlign","onClick","txs","Number","notifyError"],"sourceRoot":""}