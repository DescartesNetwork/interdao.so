{"version":3,"file":"static/js/src_templates_view_blank_proposal_tsx.8f20ef12.chunk.js","mappings":"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","sources":["templates/components/proposalTemplateCard.tsx","templates/components/proposalCardDefault/wrapStatistic.tsx","templates/components/proposalCardDefault/index.tsx","templates/view/blank/configs.ts","templates/view/blank/proposal.tsx"],"sourcesContent":["import { useHistory } from 'react-router-dom'\nimport { util } from '@sentre/senhub'\n\nimport { Card, CardProps, Col, Row, Typography } from 'antd'\nimport ProposalStatus from 'components/proposalStatus'\n\nimport useProposalMetaData from 'hooks/proposal/useProposalMetaData'\nimport useProposalStatus from 'hooks/proposal/useProposalStatus'\nimport { APP_ROUTE } from 'configs/route'\n\ntype PropProposalTemplateCard = {\n  proposalAddress: string\n} & CardProps\n\nconst ProposalTemplateCard: React.FC<PropProposalTemplateCard> = ({\n  proposalAddress,\n  ...rest\n}) => {\n  const history = useHistory()\n  const { metaData } = useProposalMetaData(proposalAddress)\n  const { status } = useProposalStatus(proposalAddress)\n\n  return (\n    <Card\n      bordered={false}\n      onClick={() =>\n        history.push(\n          APP_ROUTE.proposalDetails.generatePath({ proposalAddress }),\n        )\n      }\n      className=\"proposal-card\"\n      bodyStyle={{ padding: '24px 12px 0 0', minHeight: 150 }}\n      hoverable\n      {...rest}\n    >\n      <Row gutter={[8, 8]}>\n        <Col span={24}>\n          <Row>\n            <Col flex=\"auto\">\n              <Typography.Title level={4}>\n                {metaData?.title\n                  ? metaData.title\n                  : util.shortenAddress(proposalAddress)}\n              </Typography.Title>\n            </Col>\n            <Col>\n              <ProposalStatus status={status} />\n            </Col>\n          </Row>\n        </Col>\n        <Col xs={24} md={20}>\n          {rest.children}\n        </Col>\n        <Col span={24}>\n          <Typography.Paragraph\n            style={{ margin: 0 }}\n            type=\"secondary\"\n            ellipsis={{ rows: 2 }}\n          >\n            {metaData?.description}\n          </Typography.Paragraph>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default ProposalTemplateCard\n","import { MintAvatar, MintSymbol } from '@sen-use/app'\nimport { Space, Typography } from 'antd'\nimport RowSpaceVertical from 'components/ui/rowSpaceVertical'\n\nimport { ComponentConfigs } from '../templateForm'\n\nconst WrapStatistic = ({\n  configs,\n  value,\n}: {\n  configs: ComponentConfigs<any>\n  value: string\n}) => {\n  if (configs.type === 'mint-select')\n    return (\n      <RowSpaceVertical\n        label={configs.title}\n        value={\n          <Typography.Text className=\"t-16\">\n            <Space>\n              <MintAvatar mintAddress={value} />\n              <MintSymbol mintAddress={value} />\n            </Space>\n          </Typography.Text>\n        }\n      />\n    )\n\n  if (configs.type === 'number')\n    return (\n      <RowSpaceVertical\n        className=\"t-16\"\n        label={configs.title}\n        value={value || '--'}\n      />\n    )\n\n  return null\n}\n\nexport default WrapStatistic\n","import { Fragment } from 'react'\nimport moment from 'moment'\n\nimport { Col, Row, Spin, Typography } from 'antd'\nimport RowSpaceVertical from 'components/ui/rowSpaceVertical'\nimport ProposalTemplateCard from '../../components/proposalTemplateCard'\nimport WrapStatistic from './wrapStatistic'\n\nimport useProposal from 'hooks/proposal/useProposal'\nimport useProposalMetaData from 'hooks/proposal/useProposalMetaData'\nimport { TemplateConfig } from 'templates/constant'\n\nconst ProposalCardDefault = ({\n  proposalAddress,\n  configs,\n  background,\n}: {\n  proposalAddress: string\n  configs: TemplateConfig<any>\n  background: string\n}) => {\n  const proposalData = useProposal(proposalAddress)\n  const { metaData } = useProposalMetaData(proposalAddress)\n\n  if (!proposalData || !metaData?.templateData) return <Spin spinning />\n\n  const endTime = proposalData.endDate.toNumber() * 1000\n  const templateData = metaData.templateData\n\n  return (\n    <ProposalTemplateCard\n      proposalAddress={proposalAddress}\n      style={{\n        background,\n      }}\n    >\n      <Row gutter={[12, 12]}>\n        <Col xs={12} md={6}>\n          <RowSpaceVertical\n            label=\"Template\"\n            value={\n              <Typography.Text className=\"t-16\">\n                {metaData.templateConfig.title}\n              </Typography.Text>\n            }\n          />\n        </Col>\n        <Col xs={12} md={6}>\n          <RowSpaceVertical\n            label=\"End time\"\n            value={\n              endTime && (\n                <Typography.Text className=\"t-16\">\n                  {moment(endTime).format('hh:mm A, MMM Do, YYYY')}\n                </Typography.Text>\n              )\n            }\n          />\n        </Col>\n        {configs.components.map((cpn) => {\n          const prefix = cpn.prefix\n          return (\n            <Fragment key={cpn.id}>\n              {prefix && (\n                <Col xs={12} md={6}>\n                  <WrapStatistic\n                    configs={prefix}\n                    value={templateData[prefix.id]}\n                  />\n                </Col>\n              )}\n              {(cpn.type === 'mint-select' || cpn.type === 'number') && (\n                <Col xs={12} md={6}>\n                  <WrapStatistic configs={cpn} value={templateData[cpn.id]} />\n                </Col>\n              )}\n            </Fragment>\n          )\n        })}\n      </Row>\n    </ProposalTemplateCard>\n  )\n}\n\nexport default ProposalCardDefault\n","import { ComponentConfigs } from 'templates/components/templateForm'\nimport { TemplateConfig, TemplateNames } from '../../constant'\n\nexport type IDS = ''\nexport const COMPONENT_CONFIGS: ComponentConfigs<IDS>[] = []\n\nexport const TEMPLATE_CONFIGS: TemplateConfig<IDS> = {\n  name: TemplateNames.BlankTemplate,\n  title: 'Blank',\n  components: COMPONENT_CONFIGS,\n}\n","import { Spin } from 'antd'\nimport { PropsTemplateProposalLoader } from '../../templateLoader'\n\nimport useProposal from 'hooks/proposal/useProposal'\nimport useProposalMetaData from 'hooks/proposal/useProposalMetaData'\nimport ProposalCardDefault from 'templates/components/proposalCardDefault'\nimport { TEMPLATE_CONFIGS } from './configs'\n\nimport BACKGROUND from 'static/images/templates/bg-blank.png'\n\nconst Proposal = ({ proposalAddress }: PropsTemplateProposalLoader) => {\n  const proposalData = useProposal(proposalAddress)\n  const { metaData } = useProposalMetaData(proposalAddress)\n\n  if (!proposalData || !metaData) return <Spin spinning />\n\n  return (\n    <ProposalCardDefault\n      proposalAddress={proposalAddress}\n      configs={TEMPLATE_CONFIGS}\n      background={`url(${BACKGROUND})`}\n    />\n  )\n}\n\nexport default Proposal\n"],"names":["proposalAddress","rest","history","useHistory","metaData","useProposalMetaData","status","useProposalStatus","Card","bordered","onClick","push","APP_ROUTE","className","bodyStyle","padding","minHeight","hoverable","Row","gutter","Col","span","flex","Typography","level","title","util","xs","md","children","style","margin","type","ellipsis","rows","description","configs","value","label","Space","mintAddress","background","proposalData","useProposal","templateData","Spin","spinning","endTime","endDate","toNumber","templateConfig","moment","format","components","map","cpn","prefix","Fragment","id","TEMPLATE_CONFIGS","name","TemplateNames","BACKGROUND"],"sourceRoot":""}