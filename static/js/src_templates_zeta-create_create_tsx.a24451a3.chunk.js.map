{"version":3,"file":"static/js/src_templates_zeta-create_create_tsx.a24451a3.chunk.js","mappings":"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","sources":["templates/core/rule.ts","templates/core/templateParser.ts","templates/hooks/useConfirmIdl.ts","templates/zeta-create/configs.ts","templates/zeta-create/create.tsx","templates/zeta-create/zetaCreateHelper.ts"],"sourcesContent":["import { utils, web3 } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport enum RulesName {\n  'tokenAccount' = 'token-account',\n  'decimalize' = 'decimalize',\n}\n\nexport type RulesData = {\n  [RulesName.tokenAccount]: { mint: string; owner: string }\n  [RulesName.decimalize]: { mint: string; amount: string }\n}\nexport const TEMPLATE_RULES = {\n  [RulesName.tokenAccount]: {\n    call: async (data: RulesData[RulesName.tokenAccount]) => {\n      return utils.token.associatedAddress({\n        mint: new web3.PublicKey(data.mint),\n        owner: new web3.PublicKey(data.owner),\n      })\n    },\n  },\n  [RulesName.decimalize]: {\n    call: async (data: RulesData[RulesName.decimalize]) => {\n      const { splt } = window.sentre\n      const mintData = await splt.getMintData(data.mint)\n      return util.decimalize(data.amount, mintData.decimals)\n    },\n  },\n}\n","import { AnchorProvider, Program, BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js'\n\nimport { rpc } from '@sentre/senhub'\nimport SafeWallet from 'helpers/safeWallet'\nimport {\n  isTemplateAccountWithRule,\n  isTemplateArgWithRule,\n  TemplateArg,\n  TemplateIdl,\n} from 'templates'\nimport { TEMPLATE_RULES } from './rule'\nimport { ProposalAccountType, ProposalReturnType } from 'view/templates/types'\n\nconst ANCHOR_PREFIX_SIZE = 8\n\nconst getProgram = (templateIdl: TemplateIdl) => {\n  const connection = new Connection(rpc, { commitment: 'confirmed' })\n  const provider = new AnchorProvider(connection, new SafeWallet(), {\n    commitment: 'confirmed',\n  })\n  return new Program(\n    {\n      instructions: [\n        {\n          name: templateIdl.ixName,\n          accounts: templateIdl.accounts,\n          args: templateIdl.args,\n        },\n      ],\n      name: 'program-parser',\n      version: '0.0.0',\n    },\n    templateIdl.programId,\n    provider,\n  )\n}\n\nconst parserAccounts = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n): Promise<Record<string, PublicKey>> => {\n  const idlAccounts = templateIdl.accounts\n  const accounts: Record<string, PublicKey> = {}\n  for (const idlAccount of idlAccounts) {\n    // Build pubkey with template rule\n    if (isTemplateAccountWithRule(idlAccount)) {\n      const ruleConfig = idlAccount.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      const pubkey: any = await TEMPLATE_RULES[idlAccount.rule.name].call({\n        ...ruleData,\n      })\n      accounts[idlAccount.name] = pubkey\n    } else {\n      accounts[idlAccount.name] = new PublicKey(templateData[idlAccount.name])\n    }\n  }\n  return accounts\n}\n\nconst parserArg = (val: string, type: TemplateArg['type']) => {\n  switch (type) {\n    case 'u8':\n      return Number(val)\n    case 'u32':\n      return Number(val)\n    case 'u64':\n      return new BN(val)\n    default:\n      throw new Error('Invalid type of arg: ' + type)\n  }\n}\n\nconst parserArgs = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const args: any[] = []\n  for (const arg of templateIdl.args) {\n    let val: any = templateData[arg.name]\n    if (isTemplateArgWithRule(arg)) {\n      const ruleConfig = arg.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      val = await TEMPLATE_RULES[arg.rule.name].call({\n        ...ruleData,\n      })\n    }\n    args.push(parserArg(val, arg.type))\n  }\n  return args\n}\n\nexport const parserIxData = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const program = await getProgram(templateIdl)\n  const accounts = await parserAccounts(templateIdl, templateData)\n  const args = await parserArgs(templateIdl, templateData)\n  const ix = await program.methods[templateIdl.ixName]\n    .call(this, ...args)\n    .accounts(accounts)\n    .instruction()\n  if (!templateIdl.anchor)\n    ix.data = ix.data.slice(ANCHOR_PREFIX_SIZE, ix.data.length)\n\n  return ix\n}\n\nexport const parserProposalReturnType = (\n  templateIdl: TemplateIdl,\n  ix: TransactionInstruction,\n): ProposalReturnType => {\n  const accounts: Record<string, ProposalAccountType> = {}\n  for (let i = 0; i < templateIdl.accounts.length; i++) {\n    const idlAcc = templateIdl.accounts[i]\n    accounts[idlAcc.name] = {\n      isMaster: idlAcc.isMaster,\n      isSigner: idlAcc.isSigner,\n      isWritable: idlAcc.isMut,\n      pubkey: ix.keys[i].pubkey,\n    }\n  }\n\n  const proposalReturnType: ProposalReturnType = {\n    name: templateIdl.name,\n    data: ix.data,\n    accounts,\n    programId: new PublicKey(templateIdl.programId),\n  }\n  return proposalReturnType\n}\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport configs from 'configs'\nimport { AppDispatch } from 'model'\nimport {\n  clearTemplate,\n  setTemplateData,\n  setTemplateName,\n  setTx,\n  setVisible,\n} from 'model/template.controller'\nimport { TemplateIdl } from '../index'\nimport { parserIxData, parserProposalReturnType } from '../core/templateParser'\nimport useDaoNameUrl from 'hooks/dao/useDaoNameUrl'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n  const { daoNameUrl } = useDaoNameUrl(daoAddress)\n\n  const confirm = useCallback(\n    async (templateIdl: TemplateIdl, templateData: Record<string, string>) => {\n      const ix = await parserIxData(templateIdl, templateData)\n      const tx = await parserProposalReturnType(templateIdl, ix)\n      await dispatch(setTemplateName(templateIdl.name))\n      await dispatch(setTx(tx))\n      await dispatch(setVisible(false))\n      await dispatch(setTemplateData(templateData))\n      return history.push(\n        `/app/${appId}/dao/${daoAddress}/${daoNameUrl}/new-proposal`,\n      )\n    },\n    [daoAddress, daoNameUrl, dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { TemplateIdl, TemplateNames } from '../index'\nimport { PROGRAM_ID } from '../zeta-create/zetaCreateHelper'\n\nexport enum ZetaCreateIds {\n  // Accounts\n  zetaGroup = 'zetaGroup',\n  systemProgram = 'systemProgram',\n  zetaProgram = 'zetaProgram',\n  payer = 'payer',\n  authority = 'authority',\n  marginAccount = 'marginAccount',\n}\n\nexport const ZetaCreateIdl: TemplateIdl = {\n  name: TemplateNames.ZetaCreate,\n  ixName: 'initializeMarginAccount',\n  anchor: true,\n  accounts: [\n    {\n      name: ZetaCreateIds.marginAccount,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaCreateIds.authority,\n      isMut: false,\n      isSigner: true,\n      isMaster: true,\n    },\n    {\n      name: ZetaCreateIds.payer,\n      isMut: true,\n      isSigner: true,\n      isMaster: true,\n    },\n    {\n      name: ZetaCreateIds.zetaProgram,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaCreateIds.systemProgram,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n    {\n      name: ZetaCreateIds.zetaGroup,\n      isMut: false,\n      isSigner: false,\n      isMaster: false,\n    },\n  ],\n  args: [],\n  programId: PROGRAM_ID.toBase58(),\n}\n","import { useCallback, useState } from 'react'\n\nimport { Button, Col, Empty, Row, Space, Typography } from 'antd'\n\nimport { ZetaCreateIdl, ZetaCreateIds } from './configs'\nimport { PropsCreateComponent } from '../index'\nimport { useConfirmIdl } from '../hooks/useConfirmIdl'\nimport { useDaoData } from 'hooks/dao'\nimport { zetaCreateParams } from './zetaCreateHelper'\n\nconst Create = ({ daoAddress = '' }: PropsCreateComponent) => {\n  const daoData = useDaoData(daoAddress)\n  const { confirm, close } = useConfirmIdl()\n  const [loading, setLoading] = useState(false)\n\n  const onConfirm = useCallback(async () => {\n    try {\n      if (!daoData) throw new Error('Invalid DAO data')\n      setLoading(true)\n      const masterAddress = daoData.master.toBase58()\n      const { marginAccount, zetaGroup, systemProgram, zetaProgram } =\n        await zetaCreateParams(masterAddress)\n\n      const defaultData = {\n        [ZetaCreateIds.zetaGroup]: zetaGroup.toBase58(),\n        [ZetaCreateIds.marginAccount]: marginAccount.toBase58(),\n        [ZetaCreateIds.authority]: masterAddress,\n        [ZetaCreateIds.payer]: masterAddress,\n        [ZetaCreateIds.systemProgram]: systemProgram.toBase58(),\n        [ZetaCreateIds.zetaProgram]: zetaProgram.toBase58(),\n      }\n      return confirm(ZetaCreateIdl, defaultData)\n    } catch (er: any) {\n      window.notify({ type: 'error', description: er.message })\n    } finally {\n      setLoading(false)\n    }\n  }, [confirm, daoData])\n\n  if (!daoData) return <Empty description=\"Invalid DAO data\" />\n\n  return (\n    <Row gutter={[24, 24]} justify=\"space-between\" style={{ height: '100%' }}>\n      <Col span={24}>\n        <Typography.Text type=\"secondary\">\n          Margin account must be created first to store assets and then can\n          perform other transactions\n        </Typography.Text>\n      </Col>\n      <Col span={24}>\n        <Row style={{ height: '100%' }} align=\"bottom\">\n          <Col span={24} style={{ textAlign: 'right' }}>\n            <Space>\n              <Button type=\"text\" onClick={close}>\n                Close\n              </Button>\n              <Button type=\"primary\" onClick={onConfirm} loading={loading}>\n                Continue\n              </Button>\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n","import { rpc, net } from '@sentre/senhub'\nimport { Connection, PublicKey } from '@solana/web3.js'\nimport { web3 } from '@project-serum/anchor'\nimport { Exchange, Network, utils } from '@zetamarkets/sdk'\nimport { toPublicKey } from 'sentre-web3'\n\nexport const network = net as Network\nexport const PROGRAM_ID =\n  network === 'devnet'\n    ? new PublicKey('BG3oRikW8d16YjUEmX3ZxHm9SiJzrGtMhsSR8aCw1Cd7')\n    : new PublicKey('ZETAxsqBRek56DhiGXrn75yj2NHU3aYUnxvHXpkf3aD')\n\nexport type CreateInfo = {\n  zetaGroup: PublicKey\n  marginAccount: PublicKey\n  systemProgram: PublicKey\n  zetaProgram: PublicKey\n}\n\nexport const zetaCreateParams = async (\n  masterDaoAddress: string,\n): Promise<CreateInfo> => {\n  const connection = new Connection(rpc)\n  await Exchange.load(\n    PROGRAM_ID,\n    network,\n    connection,\n    utils.defaultCommitment(),\n    // Exchange wallet can be ignored for normal clients.\n    undefined,\n    // ThrottleMs - increase if you are running into rate limit issues on startup.\n    0,\n  )\n  const masterDaoPublicKey = toPublicKey(masterDaoAddress)\n  const programId = Exchange.programId\n  const zetaGroup = Exchange.zetaGroupAddress\n  const [marginAccount] = await utils.getMarginAccount(\n    programId,\n    zetaGroup,\n    masterDaoPublicKey,\n  )\n\n  return {\n    zetaGroup,\n    marginAccount,\n    systemProgram: web3.SystemProgram.programId,\n    zetaProgram: programId,\n  }\n}\n"],"names":["RulesName","TEMPLATE_RULES","tokenAccount","call","async","utils","mint","web3","data","owner","decimalize","splt","window","sentre","mintData","getMintData","util","amount","decimals","parserArg","val","type","Number","BN","Error","parserIxData","templateIdl","templateData","program","connection","Connection","rpc","commitment","provider","AnchorProvider","SafeWallet","Program","instructions","name","ixName","accounts","args","version","programId","getProgram","idlAccounts","idlAccount","isTemplateAccountWithRule","ruleConfig","rule","configs","ruleData","key","pubkey","PublicKey","parserAccounts","arg","isTemplateArgWithRule","push","parserArgs","ix","methods","instruction","anchor","slice","length","manifest","appId","useConfirmIdl","dispatch","useDispatch","history","useHistory","daoAddress","useParams","daoNameUrl","useDaoNameUrl","confirm","useCallback","tx","i","idlAcc","isMaster","isSigner","isWritable","isMut","keys","parserProposalReturnType","setTemplateName","setTx","setVisible","setTemplateData","close","clearTemplate","ZetaCreateIds","ZetaCreateIdl","TemplateNames","marginAccount","authority","payer","zetaProgram","systemProgram","zetaGroup","PROGRAM_ID","daoData","useDaoData","loading","setLoading","useState","onConfirm","masterAddress","master","toBase58","zetaCreateParams","defaultData","er","notify","description","message","Row","gutter","justify","style","height","Col","span","Typography","align","textAlign","Space","Button","onClick","Empty","network","net","Exchange","undefined","masterDaoPublicKey","toPublicKey","masterDaoAddress"],"sourceRoot":""}