{"version":3,"file":"static/js/914.88cd176f.chunk.js","mappings":"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","sources":["os/providers/ui.provider.tsx","os/providers/pool.provider.tsx","os/providers/wallet.provider.tsx","os/providers/account.provider.tsx","shared/tokenProvider/supplementary.ts","shared/tokenProvider/index.ts","os/providers/mint.provider.tsx","shared/dataloader/index.ts","shared/util.ts"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n  CSSProperties,\n  useCallback,\n} from 'react'\n\nimport { ConfigProvider } from 'antd'\n\nimport {\n  useRootSelector,\n  RootState,\n  useRootDispatch,\n  RootDispatch,\n} from 'os/store'\nimport {\n  UIState,\n  setBackground as _setBackground,\n  Background,\n} from 'os/store/ui.reducer'\nimport { ConfigProviderProps } from 'antd/lib/config-provider'\n\nconst Context = createContext<UIProvider>({} as UIProvider)\n\nexport type UIProvider = {\n  ui: UIState\n  setBackground: (\n    ...args: Parameters<typeof _setBackground>\n  ) => Promise<{ background: Background }>\n}\n\n/**\n * UI Context Provider\n */\nconst UIContextProvider = ({\n  children,\n  appId,\n  style = {},\n  antd = false,\n}: {\n  children: ReactNode\n  appId: string\n  style?: CSSProperties\n  antd?: boolean | ConfigProviderProps\n}) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { ui } = useRootSelector((state: RootState) => state)\n  const setBackground = useCallback(\n    async (...args: Parameters<typeof _setBackground>) =>\n      await dispatch(_setBackground(...args)).unwrap(),\n    [dispatch],\n  )\n  const provider = useMemo(() => ({ ui, setBackground }), [ui, setBackground])\n  const configProvider = antd\n    ? {\n        getPopupContainer: () => document.getElementById(appId) as HTMLElement,\n        ...(typeof antd === 'object' ? antd : {}),\n      }\n    : undefined\n\n  return (\n    <Context.Provider value={provider}>\n      <section\n        id={appId}\n        style={{ height: '100%', backgroundColor: 'transparent', ...style }}\n      >\n        {configProvider ? (\n          <ConfigProvider {...configProvider}>{children}</ConfigProvider>\n        ) : (\n          children\n        )}\n      </section>\n    </Context.Provider>\n  )\n}\nexport default UIContextProvider\n\n/**\n * UI Context Consumer\n */\nconst UIComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * UI HOC\n */\nexport const withUI = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <UIComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </UIComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * UI Hook\n */\nexport const useUI = () => {\n  return useContext<UIProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { PoolsState } from 'os/store/pools.reducer'\n\nconst Context = createContext<PoolProvider>({} as PoolProvider)\n\nexport type PoolProvider = {\n  pools: PoolsState\n}\n\n/**\n * Pool Context Provider\n */\nconst PoolContextProvider = ({ children }: { children: ReactNode }) => {\n  const { pools } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ pools }), [pools])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default PoolContextProvider\n\n/**\n * Pool Context Consumer\n */\nconst PoolContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Pool HOC\n */\nexport const withPool = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <PoolContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </PoolContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Pool Hook\n */\nexport const usePool = () => {\n  return useContext<PoolProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { WalletState } from 'os/store/wallet.reducer'\n\nconst Context = createContext<WalletProvider>({} as WalletProvider)\n\nexport type WalletProvider = {\n  wallet: WalletState\n}\n\n/**\n * Wallet Context Provider\n */\nconst WalletContextProvider = ({ children }: { children: ReactNode }) => {\n  const { wallet } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ wallet }), [wallet])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default WalletContextProvider\n\n/**\n * Wallet Context Consumer\n */\nconst WalletContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Wallet HOC\n */\nexport const withWallet = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <WalletContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </WalletContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Wallet Hook\n */\nexport const useWallet = () => {\n  return useContext<WalletProvider>(Context)\n}\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  ReactNode,\n  useMemo,\n} from 'react'\n\nimport { useRootSelector, RootState } from 'os/store'\nimport { AccountsState } from 'os/store/accounts.reducer'\n\nconst Context = createContext<AccountProvider>({} as AccountProvider)\n\nexport type AccountProvider = {\n  accounts: AccountsState\n}\n\n/**\n * Account Context Provider\n */\nconst AccountContextProvider = ({ children }: { children: ReactNode }) => {\n  const { accounts } = useRootSelector((state: RootState) => state)\n  const provider = useMemo(() => ({ accounts }), [accounts])\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default AccountContextProvider\n\n/**\n * Account Context Consumer\n */\nconst AccountContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Account HOC\n */\nexport const withAccount = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <AccountContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </AccountContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Account Hook\n */\nexport const useAccount = () => {\n  return useContext<AccountProvider>(Context)\n}\n","// Pseudo native sol info\n// It's for all networks\nexport const sol = (chainId: 101 | 102 | 103) => ({\n  symbol: 'SOL',\n  name: 'Solana',\n  address: '11111111111111111111111111111111',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'solana',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/So11111111111111111111111111111111111111112/logo.png',\n})\n\n// Pseudo SNTR info\n// Only for devnet and testnet\nexport const sntr = (chainId: 102 | 103) => ({\n  symbol: 'SNTR',\n  name: 'Sentre',\n  address: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n  decimals: 9,\n  chainId,\n  extensions: {\n    coingeckoId: 'sentre',\n  },\n  logoURI:\n    'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M/logo.png',\n})\n\n// Pseudo token infos for devnet\nconst supplementary = [\n  sol(103),\n  sntr(103),\n  {\n    symbol: 'wBTC',\n    name: 'Wrapped Bitcoin',\n    address: '8jk4eJymMfNZV9mkRNxJEt2VJ3pRvdJvD5FE94GXGBPM',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'bitcoin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/qfnqNqs3nCAHjnyCgLRDbBtq4p2MtHZxw8YjSyYhPoL/logo.png',\n  },\n  {\n    symbol: 'wETH',\n    name: 'Ethereum',\n    address: '27hdcZv7RtuMp75vupThR3T4KLsL61t476eosMdoec4c',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'ethereum',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/FeGn77dhg1KXRRFeSwwMiykZnZPw5JXW6naf2aQgZDQf/logo.png',\n  },\n  {\n    symbol: 'UNI',\n    name: 'Uniswap',\n    address: 'FVZFSXu3yn17YdcxLD72TFDUqkdE5xZvcW18EUpRQEbe',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'uniswap',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/3MVa4e32PaKmPxYUQ6n8vFkWtCma68Ld7e7fTktWDueQ/logo.png',\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    address: '2z6Ci38Cx6PyL3tFrT95vbEeB3izqpoLdxxBkJk2euyj',\n    decimals: 9,\n    chainId: 103,\n    extensions: {\n      coingeckoId: 'usd-coin',\n    },\n    logoURI:\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/assets/mainnet/EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v/logo.png',\n  },\n]\n\nexport default supplementary\n","import lunr, { Index } from 'lunr'\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry'\n\nimport { net, chainId, ChainId, Net } from 'shared/runtime'\nimport supplementary, { sntr, sol } from './supplementary'\n\nclass TokenProvider {\n  private tokenMap: Map<string, TokenInfo>\n  private engine: Index | undefined\n  readonly chainId: ChainId\n  readonly cluster: Net\n  private loading: boolean\n  private queue: Array<any>\n\n  constructor() {\n    this.tokenMap = new Map<string, TokenInfo>()\n    this.engine = undefined\n    this.chainId = chainId\n    this.cluster = net\n    this.loading = false\n    this.queue = []\n    // Init\n    this._init()\n  }\n\n  private _init = async (): Promise<[Map<string, TokenInfo>, Index]> => {\n    if (this.tokenMap.size && this.engine) return [this.tokenMap, this.engine]\n    return new Promise(async (resolve) => {\n      // Queue of getters to avoid race condition of multiple _init calling\n      if (this.loading) return this.queue.push(resolve)\n      // Start\n      this.loading = true\n      // Build token list\n      let tokenList = await (await new TokenListProvider().resolve())\n        .filterByChainId(this.chainId)\n        .getList()\n      if (this.cluster === 'devnet') tokenList = tokenList.concat(supplementary)\n      if (this.cluster === 'testnet')\n        tokenList = tokenList.concat([sntr(102), sol(102)])\n      else tokenList = tokenList.concat([sol(101)])\n      // Build token map\n      tokenList.forEach((token) => this.tokenMap.set(token.address, token))\n      // Build search engine\n      this.engine = lunr(function () {\n        this.ref('address')\n        this.field('symbol')\n        this.field('name')\n        tokenList.forEach((doc) => this.add(doc))\n      })\n      // Resolve the main getter\n      resolve([this.tokenMap, this.engine])\n      // Resolve the rest of getters\n      while (this.queue.length) this.queue.shift()([this.tokenMap, this.engine])\n      // Finish\n      this.loading = false\n    })\n  }\n\n  all = async (): Promise<TokenInfo[]> => {\n    const [tokenMap] = await this._init()\n    return Array.from(tokenMap.values())\n  }\n\n  findByAddress = async (addr: string): Promise<TokenInfo | undefined> => {\n    const [tokenMap] = await this._init()\n    return tokenMap.get(addr)\n  }\n\n  find = async (keyword: string, limit = 10): Promise<TokenInfo[]> => {\n    const [tokenMap, engine] = await this._init()\n    let tokens: TokenInfo[] = []\n    if (!keyword) return []\n    const fuzzy = keyword + '~1'\n    console.log('Debug OS Isolation:', process.env.REACT_APP_ID, fuzzy)\n    engine.search(fuzzy).forEach(({ ref }) => {\n      if (tokens.findIndex(({ address }) => address === ref) < 0) {\n        const token = tokenMap.get(ref)\n        if (token) tokens.push(token)\n      }\n    })\n    return tokens.slice(0, limit)\n  }\n}\n\nexport default TokenProvider\n","import {\n  createContext,\n  useContext,\n  Children,\n  cloneElement,\n  Component,\n  forwardRef,\n  useCallback,\n  ReactNode,\n  useMemo,\n} from 'react'\nimport { account } from '@senswap/sen-js'\n\nimport {\n  useRootDispatch,\n  useRootSelector,\n  RootState,\n  RootDispatch,\n} from 'os/store'\nimport { getMint as _getMint, MintsState } from 'os/store/mints.reducer'\nimport TokenProvider from 'shared/tokenProvider'\n\nconst tokenProvider = new TokenProvider()\nconst Context = createContext<MintProvider>({} as MintProvider)\n\nexport type MintProvider = {\n  mints: MintsState\n  getMint: (...args: Parameters<typeof _getMint>) => Promise<MintsState>\n  getDecimals: (mintAddress: string) => Promise<number>\n  tokenProvider: TokenProvider\n}\n\n/**\n * Mint Context Provider\n */\nconst MintContextProvider = ({ children }: { children: ReactNode }) => {\n  const dispatch = useRootDispatch<RootDispatch>()\n  const { mints, pools } = useRootSelector((state: RootState) => state)\n  const getMint = useCallback(\n    async (...args: Parameters<typeof _getMint>) =>\n      await dispatch(_getMint(...args)).unwrap(),\n    [dispatch],\n  )\n  const getDecimals = useCallback(\n    async (mintAddress: string) => {\n      if (!account.isAddress(mintAddress))\n        throw new Error('Invalid mint address')\n      // If the token is in token provider, return its decimals\n      const tokenInfo = await tokenProvider.findByAddress(mintAddress)\n      if (tokenInfo?.decimals) return tokenInfo.decimals\n      // If the token is lp, return 9 as default\n      const index = Object.values(pools).findIndex(\n        ({ mint_lpt }) => mint_lpt === mintAddress,\n      )\n      if (index >= 0) return 9\n      // Fetch from the clustters\n      const mintData = await getMint({ address: mintAddress })\n      if (mintData[mintAddress]?.decimals) return mintData[mintAddress].decimals\n      throw new Error('Cannot find mint decimals')\n    },\n    [getMint, pools],\n  )\n  const provider = useMemo(\n    () => ({ mints, getMint, getDecimals, tokenProvider }),\n    [mints, getMint, getDecimals],\n  )\n  // Context provider\n  return <Context.Provider value={provider}>{children}</Context.Provider>\n}\nexport default MintContextProvider\n\n/**\n * Mint Context Consumer\n */\nconst MintContextComsumer = ({ children }: { children: JSX.Element }) => {\n  return (\n    <Context.Consumer>\n      {(value) =>\n        Children.map(children, (child) => cloneElement(child, { ...value }))\n      }\n    </Context.Consumer>\n  )\n}\n\n/**\n * Mint HOC\n */\nexport const withMint = (WrappedComponent: typeof Component) => {\n  class HOC extends Component<any, any> {\n    render() {\n      const { forwardedRef, ...rest } = this.props\n      return (\n        <MintContextComsumer>\n          <WrappedComponent ref={forwardedRef} {...rest} />\n        </MintContextComsumer>\n      )\n    }\n  }\n  return forwardRef<HTMLElement, any>((props, ref) => (\n    <HOC {...props} ref={ref} />\n  ))\n}\n\n/**\n * Mint Hook\n */\nexport const useMint = () => {\n  return useContext<MintProvider>(Context)\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n"],"names":["Context","createContext","children","appId","style","antd","dispatch","useRootDispatch","ui","useRootSelector","state","setBackground","useCallback","async","_setBackground","unwrap","provider","useMemo","configProvider","getPopupContainer","document","getElementById","undefined","Provider","value","id","height","backgroundColor","ConfigProvider","UIComsumer","Consumer","Children","child","cloneElement","withUI","WrappedComponent","HOC","Component","render","forwardedRef","rest","this","props","ref","forwardRef","useUI","useContext","pools","PoolContextComsumer","withPool","usePool","wallet","WalletContextComsumer","withWallet","useWallet","accounts","AccountContextComsumer","withAccount","useAccount","sol","chainId","symbol","name","address","decimals","extensions","coingeckoId","logoURI","sntr","tokenProvider","constructor","tokenMap","engine","cluster","loading","queue","_init","size","Promise","push","resolve","tokenList","TokenListProvider","filterByChainId","getList","concat","supplementary","forEach","token","set","lunr","field","doc","add","length","shift","all","Array","from","values","findByAddress","get","addr","find","keyword","limit","tokens","fuzzy","console","log","process","search","findIndex","slice","Map","net","mints","getMint","_getMint","getDecimals","account","mintAddress","Error","tokenInfo","Object","mint_lpt","mintData","MintContextComsumer","withMint","useMint","DataLoader","configs","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","RequestQueue","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","assign","DEFAULT_SINGLE_FLIGHT_CONFIG","cacheData","SingleFlightCache","key","isFetch","request","reject","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","cache","resolves","catch","error","rejects","finally","delete","fetchRequestQueue","clearInterval","setInterval","time","now","Date","getTime","calls","asyncWait","ms","setTimeout","shortenAddress","num","delimiter","substring","explorer","addressOrTxId","numeric","numbro","randomColor","seed","opacity","hash","Math","floor","random","i","charCodeAt","rgb","fetchCGK","ticket","utils"],"sourceRoot":""}