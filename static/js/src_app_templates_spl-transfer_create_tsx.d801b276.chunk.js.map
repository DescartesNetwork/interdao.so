{"version":3,"file":"static/js/src_app_templates_spl-transfer_create_tsx.d801b276.chunk.js","mappings":"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","sources":["app/templates/components/addressInput.tsx","app/templates/components/mintInput.tsx","app/templates/components/numberInput.tsx","app/templates/core/rule.ts","app/templates/core/templateParser.ts","app/templates/hooks/useConfirmIdl.ts","app/templates/spl-transfer/configs.ts","app/templates/spl-transfer/create.tsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\n\nimport { InputProps, Space, Typography, Input } from 'antd'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { setTemplateData } from 'app/model/template.controller'\n\ntype PropsAddressInput = {\n  id: string\n  title: string\n} & InputProps\n\nconst AddressInput = ({ id, title, ...rest }: PropsAddressInput) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <Input\n        className=\"border-less\"\n        placeholder=\"Input Address\"\n        value={value}\n        onChange={(e) => dispatch(setTemplateData({ [id]: e.target.value }))}\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default AddressInput\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { Space, Typography } from 'antd'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { setTemplateData } from 'app/model/template.controller'\nimport { MintSelection } from 'shared/antd/mint'\n\nconst MintInput = ({ id, title }: { id: string; title?: string }) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      {title && <Typography.Text type=\"secondary\">{title}</Typography.Text>}\n      <MintSelection\n        value={value}\n        onChange={(value) => {\n          dispatch(setTemplateData({ [id]: value }))\n        }}\n        style={{ marginLeft: -7 }}\n      />\n    </Space>\n  )\n}\nexport default MintInput\n","import { useDispatch, useSelector } from 'react-redux'\n\nimport { InputProps, Space, Typography } from 'antd'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { setTemplateData } from 'app/model/template.controller'\n\nconst NumberInput = ({\n  id,\n  title,\n  ...rest\n}: { id: string; title: string } & InputProps) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const value = useSelector((state: AppState) => state.template.data[id])\n\n  return (\n    <Space direction=\"vertical\" size={4} style={{ width: '100%' }}>\n      <Typography.Text type=\"secondary\">{title}</Typography.Text>\n      <NumericInput\n        className=\"border-less\"\n        placeholder=\"Input Amount\"\n        defaultValue={value}\n        onValue={(val) => dispatch(setTemplateData({ [id]: val }))}\n        {...rest}\n      />\n    </Space>\n  )\n}\nexport default NumberInput\n","import { utils, web3 } from '@project-serum/anchor'\nimport util from '@senswap/sen-js/dist/utils'\n\nexport enum RulesName {\n  'tokenAccount' = 'token-account',\n  'decimalize' = 'decimalize',\n}\n\nexport type RulesData = {\n  [RulesName.tokenAccount]: { mint: string; owner: string }\n  [RulesName.decimalize]: { mint: string; amount: string }\n}\nexport const TEMPLATE_RULES = {\n  [RulesName.tokenAccount]: {\n    call: async (data: RulesData[RulesName.tokenAccount]) => {\n      return utils.token.associatedAddress({\n        mint: new web3.PublicKey(data.mint),\n        owner: new web3.PublicKey(data.owner),\n      })\n    },\n  },\n  [RulesName.decimalize]: {\n    call: async (data: RulesData[RulesName.decimalize]) => {\n      const { splt } = window.sentre\n      const mintData = await splt.getMintData(data.mint)\n      return util.decimalize(data.amount, mintData.decimals)\n    },\n  },\n}\n","import { AnchorProvider, Program, BN } from '@project-serum/anchor'\nimport { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js'\n\nimport { rpc } from 'shared/runtime'\nimport SafeWallet from 'app/helpers/safeWallet'\nimport {\n  isTemplateAccountWithRule,\n  isTemplateArgWithRule,\n  TemplateArg,\n  TemplateIdl,\n} from 'app/templates'\nimport { TEMPLATE_RULES } from './rule'\nimport {\n  ProposalAccountType,\n  ProposalReturnType,\n} from 'app/view/templates/types'\n\nconst DEFAULT_IX_NAME = 'ixname'\nconst ANCHOR_PREFIX_SIZE = 8\n\nconst getProgram = (templateIdl: TemplateIdl) => {\n  const connection = new Connection(rpc, { commitment: 'confirmed' })\n  const provider = new AnchorProvider(connection, new SafeWallet(), {\n    commitment: 'confirmed',\n  })\n  return new Program(\n    {\n      instructions: [\n        {\n          name: DEFAULT_IX_NAME,\n          accounts: templateIdl.accounts,\n          args: templateIdl.args,\n        },\n      ],\n      name: 'program-parser',\n      version: '0.0.0',\n    },\n    templateIdl.programId,\n    provider,\n  )\n}\n\nconst parserAccounts = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n): Promise<Record<string, PublicKey>> => {\n  const idlAccounts = templateIdl.accounts\n  const accounts: Record<string, PublicKey> = {}\n  for (const idlAccount of idlAccounts) {\n    // Build pubkey with template rule\n    if (isTemplateAccountWithRule(idlAccount)) {\n      const ruleConfig = idlAccount.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      const pubkey: any = await TEMPLATE_RULES[idlAccount.rule.name].call({\n        ...ruleData,\n      })\n      accounts[idlAccount.name] = pubkey\n    } else {\n      accounts[idlAccount.name] = new PublicKey(templateData[idlAccount.name])\n    }\n  }\n  return accounts\n}\n\nconst parserArg = (val: string, type: TemplateArg['type']) => {\n  switch (type) {\n    case 'u8':\n      return Number(val)\n    case 'u32':\n      return Number(val)\n    case 'u64':\n      return new BN(val)\n    default:\n      throw new Error('Invalid type of arg: ' + type)\n  }\n}\n\nconst parserArgs = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const args: any[] = []\n  for (const arg of templateIdl.args) {\n    let val: any = templateData[arg.name]\n    if (isTemplateArgWithRule(arg)) {\n      const ruleConfig = arg.rule.configs\n      const ruleData: any = {}\n      for (const key in ruleConfig) // @ts-ignore\n        ruleData[key] = templateData[ruleConfig[key]]\n      val = await TEMPLATE_RULES[arg.rule.name].call({\n        ...ruleData,\n      })\n    }\n    args.push(parserArg(val, arg.type))\n  }\n  return args\n}\n\nexport const parserIxDataNoPrefix = async (\n  templateIdl: TemplateIdl,\n  templateData: Record<string, string>,\n) => {\n  const program = await getProgram(templateIdl)\n  const accounts = await parserAccounts(templateIdl, templateData)\n  console.log('accounts', accounts)\n  const args = await parserArgs(templateIdl, templateData)\n  const ix = await program.methods[DEFAULT_IX_NAME].call(this, ...args)\n    .accounts(accounts)\n    .instruction()\n  ix.data = ix.data.slice(ANCHOR_PREFIX_SIZE, ix.data.length)\n  return ix\n}\n\nexport const parserProposalReturnType = (\n  templateIdl: TemplateIdl,\n  ix: TransactionInstruction,\n): ProposalReturnType => {\n  const accounts: Record<string, ProposalAccountType> = {}\n  for (let i = 0; i < templateIdl.accounts.length; i++) {\n    const idlAcc = templateIdl.accounts[i]\n    accounts[idlAcc.name] = {\n      isMaster: idlAcc.isMaster,\n      isSigner: idlAcc.isSigner,\n      isWritable: idlAcc.isMut,\n      pubkey: ix.keys[i].pubkey,\n    }\n  }\n\n  const proposalReturnType: ProposalReturnType = {\n    name: templateIdl.name,\n    data: ix.data,\n    accounts,\n    programId: new PublicKey(templateIdl.programId),\n  }\n  return proposalReturnType\n}\n","import { useCallback } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory, useParams } from 'react-router-dom'\n\nimport configs from 'app/configs'\nimport { AppDispatch } from 'app/model'\nimport {\n  clearTemplate,\n  setTemplateData,\n  setTemplateName,\n  setTx,\n  setVisible,\n} from 'app/model/template.controller'\nimport { TemplateIdl } from '../index'\nimport {\n  parserIxDataNoPrefix,\n  parserProposalReturnType,\n} from '../core/templateParser'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const useConfirmIdl = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const history = useHistory()\n  const { daoAddress } = useParams<{ daoAddress: string }>()\n\n  const confirm = useCallback(\n    async (templateIdl: TemplateIdl, templateData: Record<string, string>) => {\n      const ix = await parserIxDataNoPrefix(templateIdl, templateData)\n      const tx = await parserProposalReturnType(templateIdl, ix)\n      await dispatch(setTemplateName(templateIdl.name))\n      await dispatch(setTx(tx))\n      await dispatch(setVisible(false))\n      await dispatch(setTemplateData(templateData))\n      return history.push(`/app/${appId}/dao/${daoAddress}/new-proposal`)\n    },\n    [daoAddress, dispatch, history],\n  )\n\n  const close = useCallback(async () => {\n    await dispatch(clearTemplate())\n  }, [dispatch])\n\n  return { confirm, close }\n}\n","import { utils } from '@project-serum/anchor'\nimport { RulesName } from '../core/rule'\nimport { TemplateIdl, TemplateNames } from './../index'\n\nexport enum SplTransferIds {\n  // Accounts\n  source = 'source',\n  destination = 'destination',\n  authority = 'authority',\n  // Prams\n  code = 'code',\n  amount = 'amount',\n  // Context\n  mint = 'mint',\n}\n\nexport const SplTransferIdl: TemplateIdl = {\n  name: TemplateNames.SplTransfer,\n  accounts: [\n    {\n      name: SplTransferIds.source,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n      rule: {\n        name: RulesName.tokenAccount,\n        configs: { mint: SplTransferIds.mint, owner: SplTransferIds.source },\n      },\n    },\n    {\n      name: SplTransferIds.destination,\n      isMut: true,\n      isSigner: false,\n      isMaster: false,\n      rule: {\n        name: RulesName.tokenAccount,\n        configs: {\n          mint: SplTransferIds.mint,\n          owner: SplTransferIds.destination,\n        },\n      },\n    },\n    {\n      name: SplTransferIds.authority,\n      isMut: true,\n      isSigner: true,\n      isMaster: true,\n    },\n  ],\n  args: [\n    { name: SplTransferIds.code, type: 'u8' },\n    {\n      name: SplTransferIds.amount,\n      type: 'u64',\n      rule: {\n        name: RulesName.decimalize,\n        configs: {\n          amount: SplTransferIds.amount,\n          mint: SplTransferIds.mint,\n        },\n      },\n    },\n  ],\n  programId: utils.token.TOKEN_PROGRAM_ID.toBase58(),\n}\n","import { useCallback } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button, Col, Row, Space } from 'antd'\nimport { NumberInput, MintInput, AddressInput } from 'app/templates/components'\n\nimport { AppState } from 'app/model'\nimport useMetaData from 'app/hooks/useMetaData'\nimport { SplTransferIdl, SplTransferIds } from '../spl-transfer/configs'\nimport { PropsCreateComponent } from '../index'\nimport { useConfirmIdl } from '../hooks/useConfirmIdl'\n\nconst Create = ({ daoAddress = '' }: PropsCreateComponent) => {\n  const daoData = useSelector((state: AppState) => state.daos[daoAddress])\n  const templateData = useSelector((state: AppState) => state.template.data)\n  const { metaData: daoMetaData } = useMetaData(daoAddress)\n  const { confirm, close } = useConfirmIdl()\n\n  const onConfirm = useCallback(async () => {\n    const defaultData = {\n      [SplTransferIds.code]: '3',\n      [SplTransferIds.authority]: daoData.master.toBase58(),\n      [SplTransferIds.source]: daoData.master.toBase58(),\n    }\n    return confirm(SplTransferIdl, { ...defaultData, ...templateData })\n  }, [confirm, daoData.master, templateData])\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <NumberInput\n          id={SplTransferIds.amount}\n          title=\"Transfer\"\n          prefix={<MintInput id={SplTransferIds.mint} />}\n        />\n      </Col>\n      <Col span={24}>\n        <AddressInput\n          id={SplTransferIds.source}\n          title=\"Sender's Wallet Address\"\n          placeholder=\"Input Sender's Wallet Address\"\n          disabled={daoMetaData?.daoType === 'multisig-dao'}\n          defaultValue={daoData.master.toBase58()}\n        />\n      </Col>\n      <Col span={24}>\n        <AddressInput\n          id={SplTransferIds.destination}\n          title=\"Receiver's Wallet Address\"\n          placeholder=\"Input Receiver's Wallet Address\"\n        />\n      </Col>\n      <Col span={24} />\n      <Col span={24} style={{ textAlign: 'right' }}>\n        <Space>\n          <Button type=\"text\" onClick={close}>\n            Close\n          </Button>\n          <Button type=\"primary\" onClick={onConfirm} disabled={false}>\n            Continue\n          </Button>\n        </Space>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Create\n"],"names":["id","title","rest","dispatch","useDispatch","value","useSelector","state","template","data","Space","direction","size","style","width","Typography","type","Input","className","placeholder","onChange","e","setTemplateData","target","marginLeft","defaultValue","onValue","val","RulesName","TEMPLATE_RULES","tokenAccount","call","async","utils","mint","web3","owner","decimalize","splt","window","sentre","mintData","getMintData","util","amount","decimals","DEFAULT_IX_NAME","parserArg","Number","BN","Error","parserIxDataNoPrefix","templateIdl","templateData","program","connection","Connection","rpc","commitment","provider","AnchorProvider","SafeWallet","Program","instructions","name","accounts","args","version","programId","getProgram","idlAccounts","idlAccount","isTemplateAccountWithRule","ruleConfig","rule","configs","ruleData","key","pubkey","PublicKey","parserAccounts","console","log","arg","isTemplateArgWithRule","push","parserArgs","ix","methods","instruction","slice","length","manifest","appId","useConfirmIdl","history","useHistory","daoAddress","useParams","confirm","useCallback","tx","i","idlAcc","isMaster","isSigner","isWritable","isMut","keys","parserProposalReturnType","setTemplateName","setTx","setVisible","close","clearTemplate","SplTransferIds","SplTransferIdl","TemplateNames","source","destination","authority","code","daoData","daos","metaData","daoMetaData","useMetaData","onConfirm","defaultData","master","toBase58","Row","gutter","Col","span","prefix","disabled","daoType","textAlign","Button","onClick"],"sourceRoot":""}